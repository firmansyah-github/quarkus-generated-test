{
  "info": {
    "_postman_id": "20240530064844624",
    "name": "Fagen - Quarkus - customers",
    "description": "Collection for testing the customers API - GENERATED BY FAGEN",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [    
    {
      "name": "customers",
      "item": [
      	{
          "name": "Registration",
          "event": [
          {
      			"listen": "prerequest",
      			"script": {
        			"exec": [
          			"//console.log('Running beforeTest script...');",
          			"// Pre-request Script",
              		"const now = new Date();",
              		"const formattedDate = now.toISOString().replace(/[-:T.]/g, '').slice(0, -1);",
                    "const LocalDateTimeNow = now.toISOString().slice(0, -1);",
                    "//console.log(LocalDateTimeNow);",
              		"const { v4: uuidv4 } = require('uuid');",
                    "const uniqueID = uuidv4();",
                    "//console.log(LocalDateTimeNow);",
                    "//pm.globals.set('APIURL', 'http://localhost:8080/api');",
              		"pm.globals.set('UNIQUE', uniqueID);",
              		"pm.globals.set('LocalDateTimeNow', LocalDateTimeNow);",
              		"pm.globals.set('USERNAME', 'u'+formattedDate);",
              		"pm.globals.set('EMAIL', 'u'+formattedDate+'@mail.com');",
              		"pm.globals.set('PASSWORD', 'p'+formattedDate);",
                    "//console.log(formattedDate);"
        			],
        		"type": "text/javascript"
      			}
    		},
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is201Response = responseCode.code === 201;",
                  "",
                  "tests['Response code is 201 OK - Registration'] = is201Response;",
                   "",
                  "if (!(environment.isIntegrationTest)) {",
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                  "",
                  "var user = responseJSON.user || {};",
                  "",
                  "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                  "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                  "tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
                  "tests['User has \"image\" property'] = user.hasOwnProperty('image');",
                  "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"{{EMAIL}}\", \"password\":\"{{PASSWORD}}\", \"username\":\"{{USERNAME}}\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/users",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Login and Remember Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "Jul 16, 2023, 1:02:22 PM",
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK - Login and Remember Token'] = is200Response;",
                   "",
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                  "",
                  "var user = responseJSON.user || {};",
                  "",
                  "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                  "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                  "tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
                  "tests['User has \"image\" property'] = user.hasOwnProperty('image');",
                  "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                  "",
                  "if(tests['User has \"token\" property']){",
                  "    pm.globals.set('token', user.token);",
                  "}",
                  "",
                  "tests['Global variable \"token\" has been set'] = pm.globals.get('token') === user.token;",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"{{EMAIL}}\", \"password\":\"{{PASSWORD}}\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/users/login",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "users",
                "login"
              ]
            }
          },
          "response": []
        },
                		{      		
          "name": "Create customers for create customers",
          "event":[
          	{
      			"listen": "prerequest",
      			"script": {
        			"exec": [
          			"//console.log('Running beforeTest script...');",
          			"// Pre-request Script",
              		"const now = new Date();",
              		"const formattedDate = now.toISOString().replace(/[-:T.]/g, '').slice(0, -1);",
              		"pm.globals.set('UNIQUE', formattedDate);",
                    "//console.log(formattedDate);"
        			],
        		"type": "text/javascript"
      			}
    		},      
    		{
          		"listen": "test",
                "script": {
	                "type": "text/javascript",
	                "exec": [
	                  "var is201Response = responseCode.code === 201;",
                       "",
                      "tests['Response code is 201 OK'] = is201Response;",
                       "",
	                  "if (!(environment.isIntegrationTest) && is201Response) {",
	                  "var responseJSON = JSON.parse(responseBody);",
	                  "",
	                  "tests['Response contains \"customers\" property'] = responseJSON.hasOwnProperty('customers');",
	                  "",
	                  "var customers = responseJSON.customers || {};",
	                  "",
					 "tests['customers has \"customerId\" property'] = customers.hasOwnProperty('customerId');", 
				      "",
				      "if(tests['customers has \"customerId\" property']){",
                      "    pm.globals.set('customers.customers', customers.customerId);",
                      "}",
                      "",
                      "tests['Global variable \"customers.customers\" has been set'] = pm.globals.get('customers.customers') === customers.customerId;",
				      "",
				      "",
				      "if(tests['customers has \"customerId\" property']){",
                      "    pm.globals.set('customers.customerId', customers.customerId);",
                      "}",
                      "",
                      "tests['Global variable \"customers.customerId\" has been set'] = pm.globals.get('customers.customerId') === customers.customerId;",
				      "",
					   "",
					    
					 "tests['customers has \"companyName\" property'] = customers.hasOwnProperty('companyName');", 
					   "",
					    
					 "tests['customers has \"contactName\" property'] = customers.hasOwnProperty('contactName');", 
					   "",
					    
					 "tests['customers has \"contactTitle\" property'] = customers.hasOwnProperty('contactTitle');", 
					   "",
					    
					 "tests['customers has \"address\" property'] = customers.hasOwnProperty('address');", 
					   "",
					    
					 "tests['customers has \"city\" property'] = customers.hasOwnProperty('city');", 
					   "",
					    
					 "tests['customers has \"region\" property'] = customers.hasOwnProperty('region');", 
					   "",
					    
					 "tests['customers has \"postalCode\" property'] = customers.hasOwnProperty('postalCode');", 
					   "",
					    
					 "tests['customers has \"country\" property'] = customers.hasOwnProperty('country');", 
					   "",
					    
					 "tests['customers has \"phone\" property'] = customers.hasOwnProperty('phone');", 
					   "",
					    
					 "tests['customers has \"fax\" property'] = customers.hasOwnProperty('fax');", 
					   "",
					    
	                  "}",
	                  ""
                     ]
                  }
          	}
          ],
          "request":{
          	"method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"customers\":{\"customerId\":\"{{UNIQUE}}\",\"companyName\":\"companyName\",\"contactName\":\"contactName\",\"contactTitle\":\"contactTitle\",\"address\":\"address\",\"city\":\"city\",\"region\":\"region\",\"postalCode\":\"postalCode\",\"country\":\"country\",\"phone\":\"phone\",\"fax\":\"fax\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/firmansyah/customers",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "firmansyah",
                "customers"
              ]
            }
          },
          "response": []
      	}
    	,
        {      		
          "name": "Find customers By Primary Key",
          "event":[      
    		{
          		"listen": "test",
                "script": {
	                "type": "text/javascript",
	                "exec": [
	                  "var is200Response = responseCode.code === 200;",
                       
                      "tests['Response code is 200 OK - Find customers By Primary Key'] = is200Response;",
                       "",
	                  "if (!(environment.isIntegrationTest) && is200Response) {",
	                  "var responseJSON = JSON.parse(responseBody);",
	                  "",
	                  "tests['Response contains \"customers\" property'] = responseJSON.hasOwnProperty('customers');",
	                  "",
	                  "var customers = responseJSON.customers || {};",
	                  "",
					 "tests['customers has \"customerId\" property'] = customers.hasOwnProperty('customerId');", 
				      "",
				      "if(tests['customers has \"customerId\" property']){",
                      "    pm.globals.set('customers.customerId', customers.customerId);",
                      "}",
                      "",
                      "tests['Global variable \"customers.customerId\" has been set'] = pm.globals.get('customers.customerId') === customers.customerId;",
				      "",
					 "tests['customers has \"companyName\" property'] = customers.hasOwnProperty('companyName');", 
				      "",
				      "if(tests['customers has \"companyName\" property']){",
                      "    pm.globals.set('customers.companyName', customers.companyName);",
                      "}",
                      "",
                      "tests['Global variable \"customers.companyName\" has been set'] = pm.globals.get('customers.companyName') === customers.companyName;",
				      "",
					 "tests['customers has \"contactName\" property'] = customers.hasOwnProperty('contactName');", 
				      "",
				      "if(tests['customers has \"contactName\" property']){",
                      "    pm.globals.set('customers.contactName', customers.contactName);",
                      "}",
                      "",
                      "tests['Global variable \"customers.contactName\" has been set'] = pm.globals.get('customers.contactName') === customers.contactName;",
				      "",
					 "tests['customers has \"contactTitle\" property'] = customers.hasOwnProperty('contactTitle');", 
				      "",
				      "if(tests['customers has \"contactTitle\" property']){",
                      "    pm.globals.set('customers.contactTitle', customers.contactTitle);",
                      "}",
                      "",
                      "tests['Global variable \"customers.contactTitle\" has been set'] = pm.globals.get('customers.contactTitle') === customers.contactTitle;",
				      "",
					 "tests['customers has \"address\" property'] = customers.hasOwnProperty('address');", 
				      "",
				      "if(tests['customers has \"address\" property']){",
                      "    pm.globals.set('customers.address', customers.address);",
                      "}",
                      "",
                      "tests['Global variable \"customers.address\" has been set'] = pm.globals.get('customers.address') === customers.address;",
				      "",
					 "tests['customers has \"city\" property'] = customers.hasOwnProperty('city');", 
				      "",
				      "if(tests['customers has \"city\" property']){",
                      "    pm.globals.set('customers.city', customers.city);",
                      "}",
                      "",
                      "tests['Global variable \"customers.city\" has been set'] = pm.globals.get('customers.city') === customers.city;",
				      "",
					 "tests['customers has \"region\" property'] = customers.hasOwnProperty('region');", 
				      "",
				      "if(tests['customers has \"region\" property']){",
                      "    pm.globals.set('customers.region', customers.region);",
                      "}",
                      "",
                      "tests['Global variable \"customers.region\" has been set'] = pm.globals.get('customers.region') === customers.region;",
				      "",
					 "tests['customers has \"postalCode\" property'] = customers.hasOwnProperty('postalCode');", 
				      "",
				      "if(tests['customers has \"postalCode\" property']){",
                      "    pm.globals.set('customers.postalCode', customers.postalCode);",
                      "}",
                      "",
                      "tests['Global variable \"customers.postalCode\" has been set'] = pm.globals.get('customers.postalCode') === customers.postalCode;",
				      "",
					 "tests['customers has \"country\" property'] = customers.hasOwnProperty('country');", 
				      "",
				      "if(tests['customers has \"country\" property']){",
                      "    pm.globals.set('customers.country', customers.country);",
                      "}",
                      "",
                      "tests['Global variable \"customers.country\" has been set'] = pm.globals.get('customers.country') === customers.country;",
				      "",
					 "tests['customers has \"phone\" property'] = customers.hasOwnProperty('phone');", 
				      "",
				      "if(tests['customers has \"phone\" property']){",
                      "    pm.globals.set('customers.phone', customers.phone);",
                      "}",
                      "",
                      "tests['Global variable \"customers.phone\" has been set'] = pm.globals.get('customers.phone') === customers.phone;",
				      "",
					 "tests['customers has \"fax\" property'] = customers.hasOwnProperty('fax');", 
				      "",
				      "if(tests['customers has \"fax\" property']){",
                      "    pm.globals.set('customers.fax', customers.fax);",
                      "}",
                      "",
                      "tests['Global variable \"customers.fax\" has been set'] = pm.globals.get('customers.fax') === customers.fax;",
				      "",
	                  "}",
	                  ""
                     ]
                  }
          	}
          ],
          "request":{
          	"method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/firmansyah/customers/find",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "firmansyah",
                "customers",
                "find"
              ],
              "query": [
               
                  	{
              			"key": "customerId",
              			"value": "{{customers.customerId}}"
                    }
                                    
              ]
            }
          },
          "response": []
      	},
      	{      		
          "name": "Find customers By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Desc",
          "event":[      
    		{
          		"listen": "test",
                "script": {
	                "type": "text/javascript",
	                "exec": [
	                  "var is200Response = responseCode.code === 200;",
                       
                      "tests['Response code is 200 OK - Find customers By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Desc'] = is200Response;",
                       "",
	                  "if (!(environment.isIntegrationTest) && is200Response) {",
	                  "var responseJSON = JSON.parse(responseBody);",
	                  "",
	                  "tests['Response contains \"customers\" property'] = responseJSON.hasOwnProperty('customers');",
	                  "",
	                  "tests['Response contains \"customersCount\" property'] = responseJSON.hasOwnProperty('customersCount');",
	                  "",
	                  "var customers = responseJSON.customers || {};",
	                  "",
	                  "pm.test('Response should be an array', function () {",
    				  "    pm.expect(customers).to.be.an('array');",
    				  "    pm.expect(customers).to.have.length.above(0); ",
    				  "    pm.expect(customers).to.have.lengthOf(customers.length); ",
                      "});",
                      "",
					 "tests['customers[0] has \"customerId\" property'] = customers[0].hasOwnProperty('customerId');", 
				      "",
					 "tests['customers[0] has \"companyName\" property'] = customers[0].hasOwnProperty('companyName');", 
				      "",
					 "tests['customers[0] has \"contactName\" property'] = customers[0].hasOwnProperty('contactName');", 
				      "",
					 "tests['customers[0] has \"contactTitle\" property'] = customers[0].hasOwnProperty('contactTitle');", 
				      "",
					 "tests['customers[0] has \"address\" property'] = customers[0].hasOwnProperty('address');", 
				      "",
					 "tests['customers[0] has \"city\" property'] = customers[0].hasOwnProperty('city');", 
				      "",
					 "tests['customers[0] has \"region\" property'] = customers[0].hasOwnProperty('region');", 
				      "",
					 "tests['customers[0] has \"postalCode\" property'] = customers[0].hasOwnProperty('postalCode');", 
				      "",
					 "tests['customers[0] has \"country\" property'] = customers[0].hasOwnProperty('country');", 
				      "",
					 "tests['customers[0] has \"phone\" property'] = customers[0].hasOwnProperty('phone');", 
				      "",
					 "tests['customers[0] has \"fax\" property'] = customers[0].hasOwnProperty('fax');", 
				      "",
	                  "}",
	                  ""
                     ]
                  }
          	}
          ],
          "request":{
          	"method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/firmansyah/customers",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "firmansyah",
                "customers"
              ],
              "query": [
                    {
              			"key": "offset",
              			"value": "0"
                    },
                    {
              			"key": "limit",
              			"value": "10"
                    },
                    {
              			"key": "filter",
              			"value": "customerId%7Ceq%7C{{customers.customerId}}%7C%7CcompanyName%7Ceq%7C{{customers.companyName}}%7C%7CcontactName%7Ceq%7C{{customers.contactName}}%7C%7CcontactTitle%7Ceq%7C{{customers.contactTitle}}%7C%7Caddress%7Ceq%7C{{customers.address}}%7C%7Ccity%7Ceq%7C{{customers.city}}%7C%7Cregion%7Ceq%7C{{customers.region}}%7C%7CpostalCode%7Ceq%7C{{customers.postalCode}}%7C%7Ccountry%7Ceq%7C{{customers.country}}%7C%7Cphone%7Ceq%7C{{customers.phone}}%7C%7Cfax%7Ceq%7C{{customers.fax}}"
                    },
                    {
              			"key": "conjunctions",
              			"value": "OR,OR,OR,OR,OR,OR,OR,OR,OR,OR,OR"
                    },
                    {
              			"key": "sort",
              			"value": "-customerId,-companyName,-contactName,-contactTitle,-address,-city,-region,-postalCode,-country,-phone,-fax"
                    }
                    
                  
                
              ]
            }
          },
          "response": []
      	},
      	{      		
          "name": "Find customers By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Asc",
          "event":[      
    		{
          		"listen": "test",
                "script": {
	                "type": "text/javascript",
	                "exec": [
	                  "var is200Response = responseCode.code === 200;",
                       
                      "tests['Response code is 200 OK - Find customers By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Asc'] = is200Response;",
                       "",
	                  "if (!(environment.isIntegrationTest) && is200Response) {",
	                  "var responseJSON = JSON.parse(responseBody);",
	                  "",
	                  "tests['Response contains \"customers\" property'] = responseJSON.hasOwnProperty('customers');",
	                  "",
	                  "tests['Response contains \"customersCount\" property'] = responseJSON.hasOwnProperty('customersCount');",
	                  "",
	                  "var customers = responseJSON.customers || {};",
	                  "",
	                  "pm.test('Response should be an array', function () {",
    				  "    pm.expect(customers).to.be.an('array');",
    				  "    pm.expect(customers).to.have.length.above(0); ",
    				  "    pm.expect(customers).to.have.lengthOf(customers.length); ",
                      "});",
                      "",
					 "tests['customers[0] has \"customerId\" property'] = customers[0].hasOwnProperty('customerId');", 
				      "",
					 "tests['customers[0] has \"companyName\" property'] = customers[0].hasOwnProperty('companyName');", 
				      "",
					 "tests['customers[0] has \"contactName\" property'] = customers[0].hasOwnProperty('contactName');", 
				      "",
					 "tests['customers[0] has \"contactTitle\" property'] = customers[0].hasOwnProperty('contactTitle');", 
				      "",
					 "tests['customers[0] has \"address\" property'] = customers[0].hasOwnProperty('address');", 
				      "",
					 "tests['customers[0] has \"city\" property'] = customers[0].hasOwnProperty('city');", 
				      "",
					 "tests['customers[0] has \"region\" property'] = customers[0].hasOwnProperty('region');", 
				      "",
					 "tests['customers[0] has \"postalCode\" property'] = customers[0].hasOwnProperty('postalCode');", 
				      "",
					 "tests['customers[0] has \"country\" property'] = customers[0].hasOwnProperty('country');", 
				      "",
					 "tests['customers[0] has \"phone\" property'] = customers[0].hasOwnProperty('phone');", 
				      "",
					 "tests['customers[0] has \"fax\" property'] = customers[0].hasOwnProperty('fax');", 
				      "",
	                  "}",
	                  ""
                     ]
                  }
          	}
          ],
          "request":{
          	"method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/firmansyah/customers",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "firmansyah",
                "customers"
              ],
              "query": [
                    {
              			"key": "offset",
              			"value": "0"
                    },
                    {
              			"key": "limit",
              			"value": "10"
                    },
                    {
              			"key": "filter",
              			"value": "customerId%7Ceq%7C{{customers.customerId}}%7C%7CcompanyName%7Ceq%7C{{customers.companyName}}%7C%7CcontactName%7Ceq%7C{{customers.contactName}}%7C%7CcontactTitle%7Ceq%7C{{customers.contactTitle}}%7C%7Caddress%7Ceq%7C{{customers.address}}%7C%7Ccity%7Ceq%7C{{customers.city}}%7C%7Cregion%7Ceq%7C{{customers.region}}%7C%7CpostalCode%7Ceq%7C{{customers.postalCode}}%7C%7Ccountry%7Ceq%7C{{customers.country}}%7C%7Cphone%7Ceq%7C{{customers.phone}}%7C%7Cfax%7Ceq%7C{{customers.fax}}"
                    },
                    {
              			"key": "conjunctions",
              			"value": "OR,OR,OR,OR,OR,OR,OR,OR,OR,OR,OR"
                    },
                    {
              			"key": "sort",
              			"value": "customerId,companyName,contactName,contactTitle,address,city,region,postalCode,country,phone,fax"
                    }
                    
                  
                
              ]
            }
          },
          "response": []
      	},
      	{      		
          "name": "Find customers By Filter With Offset0 And Limit10, All Fields, Equals, Or Conjunction",
          "event":[      
    		{
          		"listen": "test",
                "script": {
	                "type": "text/javascript",
	                "exec": [
	                  "var is200Response = responseCode.code === 200;",
                       
                      "tests['Response code is 200 OK - Find customers By Filter With Offset0 And Limit10, All Fields, Equals, Or Conjunction'] = is200Response;",
                       "",
	                  "if (!(environment.isIntegrationTest) && is200Response) {",
	                  "var responseJSON = JSON.parse(responseBody);",
	                  "",
	                  "tests['Response contains \"customers\" property'] = responseJSON.hasOwnProperty('customers');",
	                  "",
	                  "tests['Response contains \"customersCount\" property'] = responseJSON.hasOwnProperty('customersCount');",
	                  "",
	                  "var customers = responseJSON.customers || {};",
	                  "",
	                  "pm.test('Response should be an array', function () {",
    				  "    pm.expect(customers).to.be.an('array');",
    				  "    pm.expect(customers).to.have.length.above(0); ",
    				  "    pm.expect(customers).to.have.lengthOf(customers.length); ",
                      "});",
                      "",
					 "tests['customers[0] has \"customerId\" property'] = customers[0].hasOwnProperty('customerId');", 
				      "",
					 "tests['customers[0] has \"companyName\" property'] = customers[0].hasOwnProperty('companyName');", 
				      "",
					 "tests['customers[0] has \"contactName\" property'] = customers[0].hasOwnProperty('contactName');", 
				      "",
					 "tests['customers[0] has \"contactTitle\" property'] = customers[0].hasOwnProperty('contactTitle');", 
				      "",
					 "tests['customers[0] has \"address\" property'] = customers[0].hasOwnProperty('address');", 
				      "",
					 "tests['customers[0] has \"city\" property'] = customers[0].hasOwnProperty('city');", 
				      "",
					 "tests['customers[0] has \"region\" property'] = customers[0].hasOwnProperty('region');", 
				      "",
					 "tests['customers[0] has \"postalCode\" property'] = customers[0].hasOwnProperty('postalCode');", 
				      "",
					 "tests['customers[0] has \"country\" property'] = customers[0].hasOwnProperty('country');", 
				      "",
					 "tests['customers[0] has \"phone\" property'] = customers[0].hasOwnProperty('phone');", 
				      "",
					 "tests['customers[0] has \"fax\" property'] = customers[0].hasOwnProperty('fax');", 
				      "",
	                  "}",
	                  ""
                     ]
                  }
          	}
          ],
          "request":{
          	"method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/firmansyah/customers",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "firmansyah",
                "customers"
              ],
              "query": [
                    {
              			"key": "offset",
              			"value": "0"
                    },
                    {
              			"key": "limit",
              			"value": "10"
                    },
                    {
              			"key": "filter",
              			"value": "customerId%7Ceq%7C{{customers.customerId}}%7C%7CcompanyName%7Ceq%7C{{customers.companyName}}%7C%7CcontactName%7Ceq%7C{{customers.contactName}}%7C%7CcontactTitle%7Ceq%7C{{customers.contactTitle}}%7C%7Caddress%7Ceq%7C{{customers.address}}%7C%7Ccity%7Ceq%7C{{customers.city}}%7C%7Cregion%7Ceq%7C{{customers.region}}%7C%7CpostalCode%7Ceq%7C{{customers.postalCode}}%7C%7Ccountry%7Ceq%7C{{customers.country}}%7C%7Cphone%7Ceq%7C{{customers.phone}}%7C%7Cfax%7Ceq%7C{{customers.fax}}"
                    },
                    {
              			"key": "conjunctions",
              			"value": "OR,OR,OR,OR,OR,OR,OR,OR,OR,OR,OR"
                    }
                
              ]
            }
          },
          "response": []
      	},
      	{      		
          "name": "Find customers By Filter With Offset0 And Limit10, All Fields, Equals, And Conjunction",
          "event":[      
    		{
          		"listen": "test",
                "script": {
	                "type": "text/javascript",
	                "exec": [
	                  "var is200Response = responseCode.code === 200;",
                       
                      "tests['Response code is 200 OK - Find customers By Filter With Offset0 And Limit10, All Fields, Equals, And Conjunction'] = is200Response;",
                       "",
	                  "if (!(environment.isIntegrationTest) && is200Response) {",
	                  "var responseJSON = JSON.parse(responseBody);",
	                  "",
	                  "tests['Response contains \"customers\" property'] = responseJSON.hasOwnProperty('customers');",
	                  "",
	                  "tests['Response contains \"customersCount\" property'] = responseJSON.hasOwnProperty('customersCount');",
	                  "",
	                  "var customers = responseJSON.customers || {};",
	                  "",
	                  "pm.test('Response should be an array', function () {",
    				  "    pm.expect(customers).to.be.an('array');",
    				  "    pm.expect(customers).to.have.length.above(0); ",
    				  "    pm.expect(customers).to.have.lengthOf(customers.length); ",
                      "});",
                      "",
					 "tests['customers[0] has \"customerId\" property'] = customers[0].hasOwnProperty('customerId');", 
				      "",
					 "tests['customers[0] has \"companyName\" property'] = customers[0].hasOwnProperty('companyName');", 
				      "",
					 "tests['customers[0] has \"contactName\" property'] = customers[0].hasOwnProperty('contactName');", 
				      "",
					 "tests['customers[0] has \"contactTitle\" property'] = customers[0].hasOwnProperty('contactTitle');", 
				      "",
					 "tests['customers[0] has \"address\" property'] = customers[0].hasOwnProperty('address');", 
				      "",
					 "tests['customers[0] has \"city\" property'] = customers[0].hasOwnProperty('city');", 
				      "",
					 "tests['customers[0] has \"region\" property'] = customers[0].hasOwnProperty('region');", 
				      "",
					 "tests['customers[0] has \"postalCode\" property'] = customers[0].hasOwnProperty('postalCode');", 
				      "",
					 "tests['customers[0] has \"country\" property'] = customers[0].hasOwnProperty('country');", 
				      "",
					 "tests['customers[0] has \"phone\" property'] = customers[0].hasOwnProperty('phone');", 
				      "",
					 "tests['customers[0] has \"fax\" property'] = customers[0].hasOwnProperty('fax');", 
				      "",
	                  "}",
	                  ""
                     ]
                  }
          	}
          ],
          "request":{
          	"method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/firmansyah/customers",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "firmansyah",
                "customers"
              ],
              "query": [
                    {
              			"key": "offset",
              			"value": "0"
                    },
                    {
              			"key": "limit",
              			"value": "10"
                    },
                    {
              			"key": "filter",
              			"value": "customerId%7Ceq%7C{{customers.customerId}}%7C%7CcompanyName%7Ceq%7C{{customers.companyName}}%7C%7CcontactName%7Ceq%7C{{customers.contactName}}%7C%7CcontactTitle%7Ceq%7C{{customers.contactTitle}}%7C%7Caddress%7Ceq%7C{{customers.address}}%7C%7Ccity%7Ceq%7C{{customers.city}}%7C%7Cregion%7Ceq%7C{{customers.region}}%7C%7CpostalCode%7Ceq%7C{{customers.postalCode}}%7C%7Ccountry%7Ceq%7C{{customers.country}}%7C%7Cphone%7Ceq%7C{{customers.phone}}%7C%7Cfax%7Ceq%7C{{customers.fax}}"
                    },
                    {
              			"key": "conjunctions",
              			"value": "AND,AND,AND,AND,AND,AND,AND,AND,AND,AND,AND"
                    }
                
              ]
            }
          },
          "response": []
      	},
      	{      		
          "name": "Find customers By Filter With Offset0 And Limit10, All Fields, Not Equals, Or Conjunction",
          "event":[      
    		{
          		"listen": "test",
                "script": {
	                "type": "text/javascript",
	                "exec": [
	                  "var is200Response = responseCode.code === 200;",
                       
                      "tests['Response code is 200 OK - Find customers By Filter With Offset0 And Limit10, All Fields, Not Equals, Or Conjunction'] = is200Response;",
                       "",
	                  "if (!(environment.isIntegrationTest) && is200Response) {",
	                  "var responseJSON = JSON.parse(responseBody);",
	                  "",
	                  "tests['Response contains \"customers\" property'] = responseJSON.hasOwnProperty('customers');",
	                  "",
	                  "tests['Response contains \"customersCount\" property'] = responseJSON.hasOwnProperty('customersCount');",
	                  "",
	                  "var customers = responseJSON.customers || {};",
	                  "",
	                  "if (typeof customers === 'object' && Array.isArray(customers) && customers.length > 0) {",
	                  "pm.test('Response should be an array', function () {",
    				  "    pm.expect(customers).to.be.an('array');",
    				  "    pm.expect(customers).to.have.length.above(0); ",
    				  "    pm.expect(customers).to.have.lengthOf(customers.length); ",
                      "});",
                      "",
					 "tests['customers[0] has \"customerId\" property'] = customers[0].hasOwnProperty('customerId');", 
				      "",
					 "tests['customers[0] has \"companyName\" property'] = customers[0].hasOwnProperty('companyName');", 
				      "",
					 "tests['customers[0] has \"contactName\" property'] = customers[0].hasOwnProperty('contactName');", 
				      "",
					 "tests['customers[0] has \"contactTitle\" property'] = customers[0].hasOwnProperty('contactTitle');", 
				      "",
					 "tests['customers[0] has \"address\" property'] = customers[0].hasOwnProperty('address');", 
				      "",
					 "tests['customers[0] has \"city\" property'] = customers[0].hasOwnProperty('city');", 
				      "",
					 "tests['customers[0] has \"region\" property'] = customers[0].hasOwnProperty('region');", 
				      "",
					 "tests['customers[0] has \"postalCode\" property'] = customers[0].hasOwnProperty('postalCode');", 
				      "",
					 "tests['customers[0] has \"country\" property'] = customers[0].hasOwnProperty('country');", 
				      "",
					 "tests['customers[0] has \"phone\" property'] = customers[0].hasOwnProperty('phone');", 
				      "",
					 "tests['customers[0] has \"fax\" property'] = customers[0].hasOwnProperty('fax');", 
				      "",
					  "}",                  
	                  "}",
	                  ""
                     ]
                  }
          	}
          ],
          "request":{
          	"method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/firmansyah/customers",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                 "firmansyah",
                "customers"
              ],
              "query": [
                    {
              			"key": "offset",
              			"value": "0"
                    },
                    {
              			"key": "limit",
              			"value": "10"
                    },
                    {
              			"key": "filter",
              			"value": "customerId%7Cneq%7C{{customers.customerId}}%7C%7CcompanyName%7Cneq%7C{{customers.companyName}}%7C%7CcontactName%7Cneq%7C{{customers.contactName}}%7C%7CcontactTitle%7Cneq%7C{{customers.contactTitle}}%7C%7Caddress%7Cneq%7C{{customers.address}}%7C%7Ccity%7Cneq%7C{{customers.city}}%7C%7Cregion%7Cneq%7C{{customers.region}}%7C%7CpostalCode%7Cneq%7C{{customers.postalCode}}%7C%7Ccountry%7Cneq%7C{{customers.country}}%7C%7Cphone%7Cneq%7C{{customers.phone}}%7C%7Cfax%7Cneq%7C{{customers.fax}}"
                    },
                    {
              			"key": "conjunctions",
              			"value": "OR,OR,OR,OR,OR,OR,OR,OR,OR,OR,OR"
                    }
                
              ]
            }
          },
          "response": []
      	},
      	{      		
          "name": "Find customers By Filter With Offset0 And Limit10, All Fields, Like, And Conjunction",
          "event":[      
    		{
          		"listen": "test",
                "script": {
	                "type": "text/javascript",
	                "exec": [
	                  "var is200Response = responseCode.code === 200;",
                       
                      "tests['Response code is 200 OK - Find customers By Filter With Offset0 And Limit10, All Fields, Like, And Conjunction'] = is200Response;",
                       "",
	                  "if (!(environment.isIntegrationTest) && is200Response) {",
	                  "var responseJSON = JSON.parse(responseBody);",
	                  "",
	                  "tests['Response contains \"customers\" property'] = responseJSON.hasOwnProperty('customers');",
	                  "",
	                  "tests['Response contains \"customersCount\" property'] = responseJSON.hasOwnProperty('customersCount');",
	                  "",
	                  "var customers = responseJSON.customers || {};",
	                  "",
	                  "pm.test('Response should be an array', function () {",
    				  "    pm.expect(customers).to.be.an('array');",
    				  "    pm.expect(customers).to.have.length.above(0); ",
    				  "    pm.expect(customers).to.have.lengthOf(customers.length); ",
                      "});",
                      "",
					 "tests['customers[0] has \"customerId\" property'] = customers[0].hasOwnProperty('customerId');", 
				      "",
					 "tests['customers[0] has \"companyName\" property'] = customers[0].hasOwnProperty('companyName');", 
				      "",
					 "tests['customers[0] has \"contactName\" property'] = customers[0].hasOwnProperty('contactName');", 
				      "",
					 "tests['customers[0] has \"contactTitle\" property'] = customers[0].hasOwnProperty('contactTitle');", 
				      "",
					 "tests['customers[0] has \"address\" property'] = customers[0].hasOwnProperty('address');", 
				      "",
					 "tests['customers[0] has \"city\" property'] = customers[0].hasOwnProperty('city');", 
				      "",
					 "tests['customers[0] has \"region\" property'] = customers[0].hasOwnProperty('region');", 
				      "",
					 "tests['customers[0] has \"postalCode\" property'] = customers[0].hasOwnProperty('postalCode');", 
				      "",
					 "tests['customers[0] has \"country\" property'] = customers[0].hasOwnProperty('country');", 
				      "",
					 "tests['customers[0] has \"phone\" property'] = customers[0].hasOwnProperty('phone');", 
				      "",
					 "tests['customers[0] has \"fax\" property'] = customers[0].hasOwnProperty('fax');", 
				      "",
	                  "}",
	                  ""
                     ]
                  }
          	}
          ],
          "request":{
          	"method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/firmansyah/customers",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                 "firmansyah",
                "customers"
              ],
              "query": [
                    {
              			"key": "offset",
              			"value": "0"
                    },
                    {
              			"key": "limit",
              			"value": "10"
                    },
                    {
              			"key": "filter",
              			"value": "customerId%7Clike%7C{{customers.customerId}}%7C%7CcompanyName%7Clike%7C{{customers.companyName}}%7C%7CcontactName%7Clike%7C{{customers.contactName}}%7C%7CcontactTitle%7Clike%7C{{customers.contactTitle}}%7C%7Caddress%7Clike%7C{{customers.address}}%7C%7Ccity%7Clike%7C{{customers.city}}%7C%7Cregion%7Clike%7C{{customers.region}}%7C%7CpostalCode%7Clike%7C{{customers.postalCode}}%7C%7Ccountry%7Clike%7C{{customers.country}}%7C%7Cphone%7Clike%7C{{customers.phone}}%7C%7Cfax%7Clike%7C{{customers.fax}}"
                    },
                    {
              			"key": "conjunctions",
              			"value": "AND,AND,AND,AND,AND,AND,AND,AND,AND,AND,AND"
                    }
                
              ]
            }
          },
          "response": []
      	},
      	{      		
          "name": "Find customers By Filter With Offset0 And Limit10, All Fields, Not Like, Or Conjunction",
          "event":[      
    		{
          		"listen": "test",
                "script": {
	                "type": "text/javascript",
	                "exec": [
	                  "var is200Response = responseCode.code === 200;",
                       
                      "tests['Response code is 200 OK - Find customers By Filter With Offset0 And Limit10, All Fields, Not Like, Or Conjunction'] = is200Response;",
                       "",
	                  "if (!(environment.isIntegrationTest) && is200Response) {",
	                  "var responseJSON = JSON.parse(responseBody);",
	                  "",
	                  "tests['Response contains \"customers\" property'] = responseJSON.hasOwnProperty('customers');",
	                  "",
	                  "tests['Response contains \"customersCount\" property'] = responseJSON.hasOwnProperty('customersCount');",
	                  "",
	                  "var customers = responseJSON.customers || {};",
	                  "",
	                  "if (typeof customers === 'object' && Array.isArray(customers) && customers.length > 0) {",
	                  "pm.test('Response should be an array', function () {",
    				  "    pm.expect(customers).to.be.an('array');",
    				  "    pm.expect(customers).to.have.length.above(0); ",
    				  "    pm.expect(customers).to.have.lengthOf(customers.length); ",
                      "});",
                      "",
					 "tests['customers[0] has \"customerId\" property'] = customers[0].hasOwnProperty('customerId');", 
				      "",
					 "tests['customers[0] has \"companyName\" property'] = customers[0].hasOwnProperty('companyName');", 
				      "",
					 "tests['customers[0] has \"contactName\" property'] = customers[0].hasOwnProperty('contactName');", 
				      "",
					 "tests['customers[0] has \"contactTitle\" property'] = customers[0].hasOwnProperty('contactTitle');", 
				      "",
					 "tests['customers[0] has \"address\" property'] = customers[0].hasOwnProperty('address');", 
				      "",
					 "tests['customers[0] has \"city\" property'] = customers[0].hasOwnProperty('city');", 
				      "",
					 "tests['customers[0] has \"region\" property'] = customers[0].hasOwnProperty('region');", 
				      "",
					 "tests['customers[0] has \"postalCode\" property'] = customers[0].hasOwnProperty('postalCode');", 
				      "",
					 "tests['customers[0] has \"country\" property'] = customers[0].hasOwnProperty('country');", 
				      "",
					 "tests['customers[0] has \"phone\" property'] = customers[0].hasOwnProperty('phone');", 
				      "",
					 "tests['customers[0] has \"fax\" property'] = customers[0].hasOwnProperty('fax');", 
				      "",
					  "}",                  
	                  "}",
	                  ""
                     ]
                  }
          	}
          ],
          "request":{
          	"method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/firmansyah/customers",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "firmansyah",
                "customers"
              ],
              "query": [
                    {
              			"key": "offset",
              			"value": "0"
                    },
                    {
              			"key": "limit",
              			"value": "10"
                    },
                    {
              			"key": "filter",
              			"value": "customerId%7Cnlike%7C{{customers.customerId}}%7C%7CcompanyName%7Cnlike%7C{{customers.companyName}}%7C%7CcontactName%7Cnlike%7C{{customers.contactName}}%7C%7CcontactTitle%7Cnlike%7C{{customers.contactTitle}}%7C%7Caddress%7Cnlike%7C{{customers.address}}%7C%7Ccity%7Cnlike%7C{{customers.city}}%7C%7Cregion%7Cnlike%7C{{customers.region}}%7C%7CpostalCode%7Cnlike%7C{{customers.postalCode}}%7C%7Ccountry%7Cnlike%7C{{customers.country}}%7C%7Cphone%7Cnlike%7C{{customers.phone}}%7C%7Cfax%7Cnlike%7C{{customers.fax}}"
                    },
                    {
              			"key": "conjunctions",
              			"value": "OR,OR,OR,OR,OR,OR,OR,OR,OR,OR,OR"
                    }
                
              ]
            }
          },
          "response": []
      	},
      	{      		
          "name": "Update customers",
          "event":[
          	{
          		"listen": "test",
                "script": {
	                "type": "text/javascript",
	                "exec": [
	                  "var is200Response = responseCode.code === 200;",
                       "",
                      "tests['Response code is 200 OK - Update customers'] = is200Response;",
                       "",
	                  "if (!(environment.isIntegrationTest) && is200Response) {",
	                  "var responseJSON = JSON.parse(responseBody);",
	                  "",
	                  "tests['Response contains \"customers\" property'] = responseJSON.hasOwnProperty('customers');",
	                  "",
	                  "var customers = responseJSON.customers || {};",
	                  "",
					 "tests['customers has \"customerId\" property'] = customers.hasOwnProperty('customerId');", 
				      "",
					 "tests['customers has \"companyName\" property'] = customers.hasOwnProperty('companyName');", 
				      "",
					 "tests['customers has \"contactName\" property'] = customers.hasOwnProperty('contactName');", 
				      "",
					 "tests['customers has \"contactTitle\" property'] = customers.hasOwnProperty('contactTitle');", 
				      "",
					 "tests['customers has \"address\" property'] = customers.hasOwnProperty('address');", 
				      "",
					 "tests['customers has \"city\" property'] = customers.hasOwnProperty('city');", 
				      "",
					 "tests['customers has \"region\" property'] = customers.hasOwnProperty('region');", 
				      "",
					 "tests['customers has \"postalCode\" property'] = customers.hasOwnProperty('postalCode');", 
				      "",
					 "tests['customers has \"country\" property'] = customers.hasOwnProperty('country');", 
				      "",
					 "tests['customers has \"phone\" property'] = customers.hasOwnProperty('phone');", 
				      "",
					 "tests['customers has \"fax\" property'] = customers.hasOwnProperty('fax');", 
				      "",
	                  "}",
	                  ""
                     ]
                  }
          	}
          ],
          "request":{
          	"method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"customers\":{\"customerId\":\"{{UNIQUE}}\",\"companyName\":\"companyName\",\"contactName\":\"contactName\",\"contactTitle\":\"contactTitle\",\"address\":\"address\",\"city\":\"city\",\"region\":\"region\",\"postalCode\":\"postalCode\",\"country\":\"country\",\"phone\":\"phone\",\"fax\":\"fax\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/firmansyah/customers",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                 "firmansyah",
                "customers"
              ]
            }
          },
          "response": []
      	},
      	{      		
          "name": "Delete customers",
          "event":[
          	{
          		"listen": "test",
                "script": {
	                "type": "text/javascript",
	                "exec": [
	                  "var is200Response = responseCode.code === 200;",
                       "",
                      "tests['Response code is 200 OK - Delete customers'] = is200Response;",
                       "",
	                  ""
                     ]
                  }
          	}
          ],
          "request":{
          	"method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
              },
            "url": {
              "raw": "{{APIURL}}/firmansyah/customers",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "firmansyah",
                "customers"
              ],
              "query": [
               
                  	{
              			"key": "customerId",
              			"value": "{{customers.customerId}}"
                    }
                                    
              ]
            }
          },
          "response": []
      	}
      ]
    }
  ]
}
