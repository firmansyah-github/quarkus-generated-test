{
  "info": {
    "_postman_id": "20240129100508799",
    "name": "Fagen - Quarkus - follow_relationship",
    "description": "Collection for testing the follow_relationship API - GENERATED BY FAGEN",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [    
    {
      "name": "follow_relationship",
      "item": [
      	{
          "name": "Registration",
          "event": [
          {
      			"listen": "prerequest",
      			"script": {
        			"exec": [
          			"//console.log('Running beforeTest script...');",
          			"// Pre-request Script",
              		"const now = new Date();",
              		"const formattedDate = now.toISOString().replace(/[-:T.]/g, '').slice(0, -1);",
                    "const LocalDateTimeNow = now.toISOString().slice(0, -1);",
                    "//console.log(LocalDateTimeNow);",
              		"const { v4: uuidv4 } = require('uuid');",
                    "const uniqueID = uuidv4();",
                    "//console.log(LocalDateTimeNow);",
                    "//pm.globals.set('APIURL', 'http://localhost:8080/api');",
              		"pm.globals.set('UNIQUE', uniqueID);",
              		"pm.globals.set('LocalDateTimeNow', LocalDateTimeNow);",
              		"pm.globals.set('USERNAME', 'u'+formattedDate);",
              		"pm.globals.set('EMAIL', 'u'+formattedDate+'@mail.com');",
              		"pm.globals.set('PASSWORD', 'p'+formattedDate);",
                    "//console.log(formattedDate);"
        			],
        		"type": "text/javascript"
      			}
    		},
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is201Response = responseCode.code === 201;",
                  "",
                  "tests['Response code is 201 OK - Registration'] = is201Response;",
                   "",
                  "if (!(environment.isIntegrationTest)) {",
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                  "",
                  "var user = responseJSON.user || {};",
                  "",
                  "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                  "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                  "tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
                  "tests['User has \"image\" property'] = user.hasOwnProperty('image');",
                  "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"{{EMAIL}}\", \"password\":\"{{PASSWORD}}\", \"username\":\"{{USERNAME}}\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/users",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Login and Remember Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "Jul 16, 2023, 1:02:22 PM",
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK - Login and Remember Token'] = is200Response;",
                   "",
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                  "",
                  "var user = responseJSON.user || {};",
                  "",
                  "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                  "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                  "tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
                  "tests['User has \"image\" property'] = user.hasOwnProperty('image');",
                  "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                  "",
                  "if(tests['User has \"token\" property']){",
                  "    pm.globals.set('token', user.token);",
                  "}",
                  "",
                  "tests['Global variable \"token\" has been set'] = pm.globals.get('token') === user.token;",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"{{EMAIL}}\", \"password\":\"{{PASSWORD}}\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/users/login",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "users",
                "login"
              ]
            }
          },
          "response": []
        },
                		{      		
          "name": "Create users for create follow_relationship",
          "event":[
          	{
      			"listen": "prerequest",
      			"script": {
        			"exec": [
          			"//console.log('Running beforeTest script...');",
          			"// Pre-request Script",
              		"const now = new Date();",
              		"const formattedDate = now.toISOString().replace(/[-:T.]/g, '').slice(0, -1);",
              		"pm.globals.set('UNIQUE', formattedDate);",
                    "//console.log(formattedDate);"
        			],
        		"type": "text/javascript"
      			}
    		},      
    		{
          		"listen": "test",
                "script": {
	                "type": "text/javascript",
	                "exec": [
	                  "var is201Response = responseCode.code === 201;",
                       "",
                      "tests['Response code is 201 OK'] = is201Response;",
                       "",
	                  "if (!(environment.isIntegrationTest) && is201Response) {",
	                  "var responseJSON = JSON.parse(responseBody);",
	                  "",
	                  "tests['Response contains \"users\" property'] = responseJSON.hasOwnProperty('users');",
	                  "",
	                  "var users = responseJSON.users || {};",
	                  "",
					 "tests['users has \"bio\" property'] = users.hasOwnProperty('bio');", 
					   "",
					    
					 "tests['users has \"email\" property'] = users.hasOwnProperty('email');", 
					   "",
					    
					 "tests['users has \"id\" property'] = users.hasOwnProperty('id');", 
				      "",
				      "if(tests['users has \"id\" property']){",
                      "    pm.globals.set('follow_relationship.users', users.id);",
                      "}",
                      "",
                      "tests['Global variable \"follow_relationship.users\" has been set'] = pm.globals.get('follow_relationship.users') === users.id;",
				      "",
				      "",
				      "if(tests['users has \"id\" property']){",
                      "    pm.globals.set('users.id', users.id);",
                      "}",
                      "",
                      "tests['Global variable \"users.id\" has been set'] = pm.globals.get('users.id') === users.id;",
				      "",
					   "",
					    
					 "tests['users has \"image\" property'] = users.hasOwnProperty('image');", 
					   "",
					    
					 "tests['users has \"password\" property'] = users.hasOwnProperty('password');", 
					   "",
					    
					 "tests['users has \"username\" property'] = users.hasOwnProperty('username');", 
					   "",
					    
	                  "}",
	                  ""
                     ]
                  }
          	}
          ],
          "request":{
          	"method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"users\":{\"bio\":\"bio\",\"email\":\"email\",\"id\":\"{{UNIQUE}}\",\"image\":\"image\",\"password\":\"password\",\"username\":\"username\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/firmansyah/users",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "firmansyah",
                "users"
              ]
            }
          },
          "response": []
      	}
    	,
        		{      		
          "name": "Create users for create follow_relationship",
          "event":[
          	{
      			"listen": "prerequest",
      			"script": {
        			"exec": [
          			"//console.log('Running beforeTest script...');",
          			"// Pre-request Script",
              		"const now = new Date();",
              		"const formattedDate = now.toISOString().replace(/[-:T.]/g, '').slice(0, -1);",
              		"pm.globals.set('UNIQUE', formattedDate);",
                    "//console.log(formattedDate);"
        			],
        		"type": "text/javascript"
      			}
    		},      
    		{
          		"listen": "test",
                "script": {
	                "type": "text/javascript",
	                "exec": [
	                  "var is201Response = responseCode.code === 201;",
                       "",
                      "tests['Response code is 201 OK'] = is201Response;",
                       "",
	                  "if (!(environment.isIntegrationTest) && is201Response) {",
	                  "var responseJSON = JSON.parse(responseBody);",
	                  "",
	                  "tests['Response contains \"users\" property'] = responseJSON.hasOwnProperty('users');",
	                  "",
	                  "var users = responseJSON.users || {};",
	                  "",
					 "tests['users has \"bio\" property'] = users.hasOwnProperty('bio');", 
					   "",
					    
					 "tests['users has \"email\" property'] = users.hasOwnProperty('email');", 
					   "",
					    
					 "tests['users has \"id\" property'] = users.hasOwnProperty('id');", 
				      "",
				      "if(tests['users has \"id\" property']){",
                      "    pm.globals.set('follow_relationship.users', users.id);",
                      "}",
                      "",
                      "tests['Global variable \"follow_relationship.users\" has been set'] = pm.globals.get('follow_relationship.users') === users.id;",
				      "",
				      "",
				      "if(tests['users has \"id\" property']){",
                      "    pm.globals.set('users.id', users.id);",
                      "}",
                      "",
                      "tests['Global variable \"users.id\" has been set'] = pm.globals.get('users.id') === users.id;",
				      "",
					   "",
					    
					 "tests['users has \"image\" property'] = users.hasOwnProperty('image');", 
					   "",
					    
					 "tests['users has \"password\" property'] = users.hasOwnProperty('password');", 
					   "",
					    
					 "tests['users has \"username\" property'] = users.hasOwnProperty('username');", 
					   "",
					    
	                  "}",
	                  ""
                     ]
                  }
          	}
          ],
          "request":{
          	"method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"users\":{\"bio\":\"bio\",\"email\":\"email\",\"id\":\"{{UNIQUE}}\",\"image\":\"image\",\"password\":\"password\",\"username\":\"username\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/firmansyah/users",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "firmansyah",
                "users"
              ]
            }
          },
          "response": []
      	}
    	,
        		{      		
          "name": "Create follow_relationship for create follow_relationship",
          "event":[
          	{
      			"listen": "prerequest",
      			"script": {
        			"exec": [
          			"//console.log('Running beforeTest script...');",
          			"// Pre-request Script",
              		"const now = new Date();",
              		"const formattedDate = now.toISOString().replace(/[-:T.]/g, '').slice(0, -1);",
              		"pm.globals.set('UNIQUE', formattedDate);",
                    "//console.log(formattedDate);"
        			],
        		"type": "text/javascript"
      			}
    		},      
    		{
          		"listen": "test",
                "script": {
	                "type": "text/javascript",
	                "exec": [
	                  "var is201Response = responseCode.code === 201;",
                       "",
                      "tests['Response code is 201 OK'] = is201Response;",
                       "",
	                  "if (!(environment.isIntegrationTest) && is201Response) {",
	                  "var responseJSON = JSON.parse(responseBody);",
	                  "",
	                  "tests['Response contains \"followRelationship\" property'] = responseJSON.hasOwnProperty('followRelationship');",
	                  "",
	                  "var followRelationship = responseJSON.followRelationship || {};",
	                  "",
					  "tests['followRelationship has \"followedId\" property'] = followRelationship.hasOwnProperty('usersFollowedIdResponse');",
				      "",
				      "if(tests['followRelationship has \"followedId\" property']){",
                      "    pm.globals.set('followRelationship.followedId', followRelationship.usersFollowedIdResponse.id);",
                      "}",
                      "",
                      "tests['Global variable \"followRelationship.followedId\" has been set'] = pm.globals.get('followRelationship.followedId') === followRelationship.usersFollowedIdResponse.id;",
				      "",
					   "",
					    
					  "tests['followRelationship has \"userId\" property'] = followRelationship.hasOwnProperty('usersUserIdResponse');",
				      "",
				      "if(tests['followRelationship has \"userId\" property']){",
                      "    pm.globals.set('followRelationship.userId', followRelationship.usersUserIdResponse.id);",
                      "}",
                      "",
                      "tests['Global variable \"followRelationship.userId\" has been set'] = pm.globals.get('followRelationship.userId') === followRelationship.usersUserIdResponse.id;",
				      "",
					   "",
					    
	                  "}",
	                  ""
                     ]
                  }
          	}
          ],
          "request":{
          	"method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"followRelationship\":{\"followedId\":\"{{follow_relationship.users}}\",\"userId\":\"{{follow_relationship.users}}\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/firmansyah/followRelationship",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "firmansyah",
                "followRelationship"
              ]
            }
          },
          "response": []
      	}
    	,
        {      		
          "name": "Find follow_relationship By Primary Key",
          "event":[      
    		{
          		"listen": "test",
                "script": {
	                "type": "text/javascript",
	                "exec": [
	                  "var is200Response = responseCode.code === 200;",
                       
                      "tests['Response code is 200 OK - Find follow_relationship By Primary Key'] = is200Response;",
                       "",
	                  "if (!(environment.isIntegrationTest) && is200Response) {",
	                  "var responseJSON = JSON.parse(responseBody);",
	                  "",
	                  "tests['Response contains \"followRelationship\" property'] = responseJSON.hasOwnProperty('followRelationship');",
	                  "",
	                  "var followRelationship = responseJSON.followRelationship || {};",
	                  "",
					 "tests['followRelationship has \"followedId\" property'] = followRelationship.hasOwnProperty('usersFollowedIdResponse');",
					 "",
				      "if(tests['followRelationship has \"followedId\" property']){",
                      "    pm.globals.set('followRelationship.followedId', followRelationship.usersFollowedIdResponse.id);",
                      "}",
                      "",
                      "tests['Global variable \"followRelationship.followedId\" has been set'] = pm.globals.get('followRelationship.followedId') === followRelationship.usersFollowedIdResponse.id;",
				      "",			
					 "tests['followRelationship has \"userId\" property'] = followRelationship.hasOwnProperty('usersUserIdResponse');",
					 "",
				      "if(tests['followRelationship has \"userId\" property']){",
                      "    pm.globals.set('followRelationship.userId', followRelationship.usersUserIdResponse.id);",
                      "}",
                      "",
                      "tests['Global variable \"followRelationship.userId\" has been set'] = pm.globals.get('followRelationship.userId') === followRelationship.usersUserIdResponse.id;",
				      "",			
	                  "}",
	                  ""
                     ]
                  }
          	}
          ],
          "request":{
          	"method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/firmansyah/followRelationship/find",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "firmansyah",
                "followRelationship",
                "find"
              ],
              "query": [
               
                  	{
              			"key": "followedId",
              			"value": "{{followRelationship.followedId}}"
                    }
                    ,
                  	{
              			"key": "userId",
              			"value": "{{followRelationship.userId}}"
                    }
                                    
              ]
            }
          },
          "response": []
      	},
      	{      		
          "name": "Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Desc",
          "event":[      
    		{
          		"listen": "test",
                "script": {
	                "type": "text/javascript",
	                "exec": [
	                  "var is200Response = responseCode.code === 200;",
                       
                      "tests['Response code is 200 OK - Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Desc'] = is200Response;",
                       "",
	                  "if (!(environment.isIntegrationTest) && is200Response) {",
	                  "var responseJSON = JSON.parse(responseBody);",
	                  "",
	                  "tests['Response contains \"followRelationship\" property'] = responseJSON.hasOwnProperty('followRelationship');",
	                  "",
	                  "tests['Response contains \"followRelationshipCount\" property'] = responseJSON.hasOwnProperty('followRelationshipCount');",
	                  "",
	                  "var followRelationship = responseJSON.followRelationship || {};",
	                  "",
	                  "pm.test('Response should be an array', function () {",
    				  "    pm.expect(followRelationship).to.be.an('array');",
    				  "    pm.expect(followRelationship).to.have.length.above(0); ",
    				  "    pm.expect(followRelationship).to.have.lengthOf(followRelationship.length); ",
                      "});",
                      "",
					 "tests['followRelationship[0] has \"followedId\" property'] = followRelationship[0].hasOwnProperty('usersFollowedIdResponse');",
					 "",			
					 "tests['followRelationship[0] has \"userId\" property'] = followRelationship[0].hasOwnProperty('usersUserIdResponse');",
					 "",			
	                  "}",
	                  ""
                     ]
                  }
          	}
          ],
          "request":{
          	"method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/firmansyah/followRelationship",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "firmansyah",
                "followRelationship"
              ],
              "query": [
                    {
              			"key": "offset",
              			"value": "0"
                    },
                    {
              			"key": "limit",
              			"value": "10"
                    },
                    {
              			"key": "filter",
              			"value": "followedId%7Ceq%7C{{followRelationship.followedId}}%7C%7CuserId%7Ceq%7C{{followRelationship.userId}}"
                    },
                    {
              			"key": "conjunctions",
              			"value": "OR,OR"
                    },
                    {
              			"key": "sort",
              			"value": "-followedId,-userId"
                    }
                    
                  
                
              ]
            }
          },
          "response": []
      	},
      	{      		
          "name": "Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Asc",
          "event":[      
    		{
          		"listen": "test",
                "script": {
	                "type": "text/javascript",
	                "exec": [
	                  "var is200Response = responseCode.code === 200;",
                       
                      "tests['Response code is 200 OK - Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Asc'] = is200Response;",
                       "",
	                  "if (!(environment.isIntegrationTest) && is200Response) {",
	                  "var responseJSON = JSON.parse(responseBody);",
	                  "",
	                  "tests['Response contains \"followRelationship\" property'] = responseJSON.hasOwnProperty('followRelationship');",
	                  "",
	                  "tests['Response contains \"followRelationshipCount\" property'] = responseJSON.hasOwnProperty('followRelationshipCount');",
	                  "",
	                  "var followRelationship = responseJSON.followRelationship || {};",
	                  "",
	                  "pm.test('Response should be an array', function () {",
    				  "    pm.expect(followRelationship).to.be.an('array');",
    				  "    pm.expect(followRelationship).to.have.length.above(0); ",
    				  "    pm.expect(followRelationship).to.have.lengthOf(followRelationship.length); ",
                      "});",
                      "",
					 "tests['followRelationship[0] has \"followedId\" property'] = followRelationship[0].hasOwnProperty('usersFollowedIdResponse');",
					 "",			
					 "tests['followRelationship[0] has \"userId\" property'] = followRelationship[0].hasOwnProperty('usersUserIdResponse');",
					 "",			
	                  "}",
	                  ""
                     ]
                  }
          	}
          ],
          "request":{
          	"method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/firmansyah/followRelationship",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "firmansyah",
                "followRelationship"
              ],
              "query": [
                    {
              			"key": "offset",
              			"value": "0"
                    },
                    {
              			"key": "limit",
              			"value": "10"
                    },
                    {
              			"key": "filter",
              			"value": "followedId%7Ceq%7C{{followRelationship.followedId}}%7C%7CuserId%7Ceq%7C{{followRelationship.userId}}"
                    },
                    {
              			"key": "conjunctions",
              			"value": "OR,OR"
                    },
                    {
              			"key": "sort",
              			"value": "followedId,userId"
                    }
                    
                  
                
              ]
            }
          },
          "response": []
      	},
      	{      		
          "name": "Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Equals, Or Conjunction",
          "event":[      
    		{
          		"listen": "test",
                "script": {
	                "type": "text/javascript",
	                "exec": [
	                  "var is200Response = responseCode.code === 200;",
                       
                      "tests['Response code is 200 OK - Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Equals, Or Conjunction'] = is200Response;",
                       "",
	                  "if (!(environment.isIntegrationTest) && is200Response) {",
	                  "var responseJSON = JSON.parse(responseBody);",
	                  "",
	                  "tests['Response contains \"followRelationship\" property'] = responseJSON.hasOwnProperty('followRelationship');",
	                  "",
	                  "tests['Response contains \"followRelationshipCount\" property'] = responseJSON.hasOwnProperty('followRelationshipCount');",
	                  "",
	                  "var followRelationship = responseJSON.followRelationship || {};",
	                  "",
	                  "pm.test('Response should be an array', function () {",
    				  "    pm.expect(followRelationship).to.be.an('array');",
    				  "    pm.expect(followRelationship).to.have.length.above(0); ",
    				  "    pm.expect(followRelationship).to.have.lengthOf(followRelationship.length); ",
                      "});",
                      "",
					 "tests['followRelationship[0] has \"followedId\" property'] = followRelationship[0].hasOwnProperty('usersFollowedIdResponse');",
					 "",			
					 "tests['followRelationship[0] has \"userId\" property'] = followRelationship[0].hasOwnProperty('usersUserIdResponse');",
					 "",			
	                  "}",
	                  ""
                     ]
                  }
          	}
          ],
          "request":{
          	"method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/firmansyah/followRelationship",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "firmansyah",
                "followRelationship"
              ],
              "query": [
                    {
              			"key": "offset",
              			"value": "0"
                    },
                    {
              			"key": "limit",
              			"value": "10"
                    },
                    {
              			"key": "filter",
              			"value": "followedId%7Ceq%7C{{followRelationship.followedId}}%7C%7CuserId%7Ceq%7C{{followRelationship.userId}}"
                    },
                    {
              			"key": "conjunctions",
              			"value": "OR,OR"
                    }
                
              ]
            }
          },
          "response": []
      	},
      	{      		
          "name": "Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Equals, And Conjunction",
          "event":[      
    		{
          		"listen": "test",
                "script": {
	                "type": "text/javascript",
	                "exec": [
	                  "var is200Response = responseCode.code === 200;",
                       
                      "tests['Response code is 200 OK - Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Equals, And Conjunction'] = is200Response;",
                       "",
	                  "if (!(environment.isIntegrationTest) && is200Response) {",
	                  "var responseJSON = JSON.parse(responseBody);",
	                  "",
	                  "tests['Response contains \"followRelationship\" property'] = responseJSON.hasOwnProperty('followRelationship');",
	                  "",
	                  "tests['Response contains \"followRelationshipCount\" property'] = responseJSON.hasOwnProperty('followRelationshipCount');",
	                  "",
	                  "var followRelationship = responseJSON.followRelationship || {};",
	                  "",
	                  "pm.test('Response should be an array', function () {",
    				  "    pm.expect(followRelationship).to.be.an('array');",
    				  "    pm.expect(followRelationship).to.have.length.above(0); ",
    				  "    pm.expect(followRelationship).to.have.lengthOf(followRelationship.length); ",
                      "});",
                      "",
					 "tests['followRelationship[0] has \"followedId\" property'] = followRelationship[0].hasOwnProperty('usersFollowedIdResponse');",
					 "",			
					 "tests['followRelationship[0] has \"userId\" property'] = followRelationship[0].hasOwnProperty('usersUserIdResponse');",
					 "",			
	                  "}",
	                  ""
                     ]
                  }
          	}
          ],
          "request":{
          	"method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/firmansyah/followRelationship",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "firmansyah",
                "followRelationship"
              ],
              "query": [
                    {
              			"key": "offset",
              			"value": "0"
                    },
                    {
              			"key": "limit",
              			"value": "10"
                    },
                    {
              			"key": "filter",
              			"value": "followedId%7Ceq%7C{{followRelationship.followedId}}%7C%7CuserId%7Ceq%7C{{followRelationship.userId}}"
                    },
                    {
              			"key": "conjunctions",
              			"value": "AND,AND"
                    }
                
              ]
            }
          },
          "response": []
      	},
      	{      		
          "name": "Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Not Equals, Or Conjunction",
          "event":[      
    		{
          		"listen": "test",
                "script": {
	                "type": "text/javascript",
	                "exec": [
	                  "var is200Response = responseCode.code === 200;",
                       
                      "tests['Response code is 200 OK - Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Not Equals, Or Conjunction'] = is200Response;",
                       "",
	                  "if (!(environment.isIntegrationTest) && is200Response) {",
	                  "var responseJSON = JSON.parse(responseBody);",
	                  "",
	                  "tests['Response contains \"followRelationship\" property'] = responseJSON.hasOwnProperty('followRelationship');",
	                  "",
	                  "tests['Response contains \"followRelationshipCount\" property'] = responseJSON.hasOwnProperty('followRelationshipCount');",
	                  "",
	                  "var followRelationship = responseJSON.followRelationship || {};",
	                  "",
	                  "if (typeof followRelationship === 'object' && Array.isArray(followRelationship) && followRelationship.length > 0) {",
	                  "pm.test('Response should be an array', function () {",
    				  "    pm.expect(followRelationship).to.be.an('array');",
    				  "    pm.expect(followRelationship).to.have.length.above(0); ",
    				  "    pm.expect(followRelationship).to.have.lengthOf(followRelationship.length); ",
                      "});",
                      "",
					 "tests['followRelationship[0] has \"followedId\" property'] = followRelationship[0].hasOwnProperty('usersFollowedIdResponse');",
					 "",			
					 "tests['followRelationship[0] has \"userId\" property'] = followRelationship[0].hasOwnProperty('usersUserIdResponse');",
					 "",			
					  "}",                  
	                  "}",
	                  ""
                     ]
                  }
          	}
          ],
          "request":{
          	"method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/firmansyah/followRelationship",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                 "firmansyah",
                "followRelationship"
              ],
              "query": [
                    {
              			"key": "offset",
              			"value": "0"
                    },
                    {
              			"key": "limit",
              			"value": "10"
                    },
                    {
              			"key": "filter",
              			"value": "followedId%7Cneq%7C{{followRelationship.followedId}}%7C%7CuserId%7Cneq%7C{{followRelationship.userId}}"
                    },
                    {
              			"key": "conjunctions",
              			"value": "OR,OR"
                    }
                
              ]
            }
          },
          "response": []
      	},
      	{      		
          "name": "Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Like, And Conjunction",
          "event":[      
    		{
          		"listen": "test",
                "script": {
	                "type": "text/javascript",
	                "exec": [
	                  "var is200Response = responseCode.code === 200;",
                       
                      "tests['Response code is 200 OK - Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Like, And Conjunction'] = is200Response;",
                       "",
	                  "if (!(environment.isIntegrationTest) && is200Response) {",
	                  "var responseJSON = JSON.parse(responseBody);",
	                  "",
	                  "tests['Response contains \"followRelationship\" property'] = responseJSON.hasOwnProperty('followRelationship');",
	                  "",
	                  "tests['Response contains \"followRelationshipCount\" property'] = responseJSON.hasOwnProperty('followRelationshipCount');",
	                  "",
	                  "var followRelationship = responseJSON.followRelationship || {};",
	                  "",
	                  "pm.test('Response should be an array', function () {",
    				  "    pm.expect(followRelationship).to.be.an('array');",
    				  "    pm.expect(followRelationship).to.have.length.above(0); ",
    				  "    pm.expect(followRelationship).to.have.lengthOf(followRelationship.length); ",
                      "});",
                      "",
					 "tests['followRelationship[0] has \"followedId\" property'] = followRelationship[0].hasOwnProperty('usersFollowedIdResponse');",
					 "",			
					 "tests['followRelationship[0] has \"userId\" property'] = followRelationship[0].hasOwnProperty('usersUserIdResponse');",
					 "",			
	                  "}",
	                  ""
                     ]
                  }
          	}
          ],
          "request":{
          	"method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/firmansyah/followRelationship",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                 "firmansyah",
                "followRelationship"
              ],
              "query": [
                    {
              			"key": "offset",
              			"value": "0"
                    },
                    {
              			"key": "limit",
              			"value": "10"
                    },
                    {
              			"key": "filter",
              			"value": "followedId%7Clike%7C{{followRelationship.followedId}}%7C%7CuserId%7Clike%7C{{followRelationship.userId}}"
                    },
                    {
              			"key": "conjunctions",
              			"value": "AND,AND"
                    }
                
              ]
            }
          },
          "response": []
      	},
      	{      		
          "name": "Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Not Like, Or Conjunction",
          "event":[      
    		{
          		"listen": "test",
                "script": {
	                "type": "text/javascript",
	                "exec": [
	                  "var is200Response = responseCode.code === 200;",
                       
                      "tests['Response code is 200 OK - Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Not Like, Or Conjunction'] = is200Response;",
                       "",
	                  "if (!(environment.isIntegrationTest) && is200Response) {",
	                  "var responseJSON = JSON.parse(responseBody);",
	                  "",
	                  "tests['Response contains \"followRelationship\" property'] = responseJSON.hasOwnProperty('followRelationship');",
	                  "",
	                  "tests['Response contains \"followRelationshipCount\" property'] = responseJSON.hasOwnProperty('followRelationshipCount');",
	                  "",
	                  "var followRelationship = responseJSON.followRelationship || {};",
	                  "",
	                  "if (typeof followRelationship === 'object' && Array.isArray(followRelationship) && followRelationship.length > 0) {",
	                  "pm.test('Response should be an array', function () {",
    				  "    pm.expect(followRelationship).to.be.an('array');",
    				  "    pm.expect(followRelationship).to.have.length.above(0); ",
    				  "    pm.expect(followRelationship).to.have.lengthOf(followRelationship.length); ",
                      "});",
                      "",
					 "tests['followRelationship[0] has \"followedId\" property'] = followRelationship[0].hasOwnProperty('usersFollowedIdResponse');",
					 "",			
					 "tests['followRelationship[0] has \"userId\" property'] = followRelationship[0].hasOwnProperty('usersUserIdResponse');",
					 "",			
					  "}",                  
	                  "}",
	                  ""
                     ]
                  }
          	}
          ],
          "request":{
          	"method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/firmansyah/followRelationship",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "firmansyah",
                "followRelationship"
              ],
              "query": [
                    {
              			"key": "offset",
              			"value": "0"
                    },
                    {
              			"key": "limit",
              			"value": "10"
                    },
                    {
              			"key": "filter",
              			"value": "followedId%7Cnlike%7C{{followRelationship.followedId}}%7C%7CuserId%7Cnlike%7C{{followRelationship.userId}}"
                    },
                    {
              			"key": "conjunctions",
              			"value": "OR,OR"
                    }
                
              ]
            }
          },
          "response": []
      	},
      	{      		
          "name": "Update follow_relationship",
          "event":[
          	{
          		"listen": "test",
                "script": {
	                "type": "text/javascript",
	                "exec": [
	                  "var is200Response = responseCode.code === 200;",
                       "",
                      "tests['Response code is 200 OK - Update follow_relationship'] = is200Response;",
                       "",
	                  "if (!(environment.isIntegrationTest) && is200Response) {",
	                  "var responseJSON = JSON.parse(responseBody);",
	                  "",
	                  "tests['Response contains \"followRelationship\" property'] = responseJSON.hasOwnProperty('followRelationship');",
	                  "",
	                  "var followRelationship = responseJSON.followRelationship || {};",
	                  "",
					 "tests['followRelationship has \"followedId\" property'] = followRelationship.hasOwnProperty('usersFollowedIdResponse');",
					 "",			
					 "tests['followRelationship has \"userId\" property'] = followRelationship.hasOwnProperty('usersUserIdResponse');",
					 "",			
	                  "}",
	                  ""
                     ]
                  }
          	}
          ],
          "request":{
          	"method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"followRelationship\":{\"followedId\":\"{{follow_relationship.users}}\",\"userId\":\"{{follow_relationship.users}}\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/firmansyah/followRelationship",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                 "firmansyah",
                "followRelationship"
              ]
            }
          },
          "response": []
      	},
      	{      		
          "name": "Delete follow_relationship",
          "event":[
          	{
          		"listen": "test",
                "script": {
	                "type": "text/javascript",
	                "exec": [
	                  "var is200Response = responseCode.code === 200;",
                       "",
                      "tests['Response code is 200 OK - Delete follow_relationship'] = is200Response;",
                       "",
	                  ""
                     ]
                  }
          	}
          ],
          "request":{
          	"method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
              },
            "url": {
              "raw": "{{APIURL}}/firmansyah/followRelationship",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "firmansyah",
                "followRelationship"
              ],
              "query": [
               
                  	{
              			"key": "followedId",
              			"value": "{{followRelationship.followedId}}"
                    }
                    ,
                  	{
              			"key": "userId",
              			"value": "{{followRelationship.userId}}"
                    }
                                    
              ]
            }
          },
          "response": []
      	}
      ]
    }
  ]
}
