// created by the factor : Dec 7, 2023, 4:03:00 PM  
// Auto-generated by the FAGEN

import "./libs/shim/core.js";
import "./libs/shim/urijs.js";
import { check } from 'k6';
import { uuidv4 } from "./libs/jslib.k6.io_k6-utils_1.4.0_index.js";
//import { uuidv4 } from 'https://jslib.k6.io/k6-utils/1.4.0/index.js';
import { htmlReport } from "./libs/htmlReport.js";
//import { htmlReport } from "https://raw.githubusercontent.com/benc-uk/k6-reporter/2.2.0/dist/bundle.js";
import { textSummary } from "./libs/jslib.k6.io_k6-summary_0.0.1_index.js";
//import { textSummary } from "https://jslib.k6.io/k6-summary/0.0.1/index.js";
import { sleep } from 'k6';
import { group } from "k6";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

const delay = 0.25;
const timeout = '2000s';
const URL = __ENV.URL;

export default function() {
  group("Registration and Authentication", function() {
    postman[Request]({
      name: "Registration",
      id: "2023-12-07-16-03-00-000",
      method: "POST",
      options: { timeout: timeout },
      address: "{{APIURL}}/users",
      data:
        '{"user":{"email":"{{EMAIL}}", "password":"{{PASSWORD}}", "username":"{{USERNAME}}"}}',
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest"
      },
      pre() {
        //console.log('Running beforeTest script...');
        // Pre-request Script
        const now = new Date();
        const formattedDate = now
          .toISOString()
          .replace(/[-:T.]/g, "")
          .slice(0, -1);
        const uniqueID = uuidv4();
        const LocalDateTimeNow = now.toISOString().slice(0, -1);
        //console.log(LocalDateTimeNow);
        pm.globals.set("APIURL", URL);
        pm.globals.set("UNIQUE", uniqueID);
        pm.globals.set("LocalDateTimeNow", LocalDateTimeNow);
        pm.globals.set("USERNAME", "u" + uniqueID);
        pm.globals.set("EMAIL", "u" + uniqueID + "@mail.com");
        pm.globals.set("PASSWORD", "p" + uniqueID);
        //console.log(formattedDate);
        //console.log(uniqueID);
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is201Response = responseCode.code === 201;

        tests["Response code is 201 OK - Registration"] = is201Response;
        
        if (!environment.isIntegrationTest && is201Response) {
          var responseJSON = JSON.parse(responseBody);

          tests[
            'Response contains "user" property'
          ] = responseJSON.hasOwnProperty("user");

          var user = responseJSON.user || {};

          tests['User has "email" property'] = user.hasOwnProperty("email");
          tests['User has "username" property'] = user.hasOwnProperty(
            "username"
          );
          tests['User has "bio" property'] = user.hasOwnProperty("bio");
          tests['User has "image" property'] = user.hasOwnProperty("image");
          tests['User has "token" property'] = user.hasOwnProperty("token");
        }
      }
    });sleep(delay);

    postman[Request]({
      name: "Login",
      id: "2023-12-07-16-03-00-000",
      method: "POST",
      options: { timeout: timeout },
      address: "{{APIURL}}/users/login",
      data: '{"user":{"email":"{{EMAIL}}", "password":"{{PASSWORD}}"}}',
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
        if (!environment.isIntegrationTest && is200Response) {

	        tests["Response code is 200 OK - Login"] = is200Response;
	        
	        var responseJSON = JSON.parse(responseBody);
	
	        tests[
	          'Response contains "user" property'
	        ] = responseJSON.hasOwnProperty("user");
	
	        var user = responseJSON.user || {};
	
	        tests['User has "email" property'] = user.hasOwnProperty("email");
	        tests['User has "username" property'] = user.hasOwnProperty("username");
	        tests['User has "bio" property'] = user.hasOwnProperty("bio");
	        tests['User has "image" property'] = user.hasOwnProperty("image");
	        tests['User has "token" property'] = user.hasOwnProperty("token");
        }
      }
    });sleep(delay);

    postman[Request]({
      name: "Login and Remember Token",
      id: "2023-12-07-16-03-00-000",
      method: "POST",
      options: { timeout: timeout },
      address: "{{APIURL}}/users/login",
      data: '{"user":{"email":"{{EMAIL}}", "password":"{{PASSWORD}}"}}',
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
        if (!environment.isIntegrationTest && is200Response) {

	        tests["Response code is 200 OK - Login and Remember Token"] = is200Response;
	        var responseJSON = JSON.parse(responseBody);
	
	        tests[
	          'Response contains "user" property'
	        ] = responseJSON.hasOwnProperty("user");
	
	        var user = responseJSON.user || {};
	
	        tests['User has "email" property'] = user.hasOwnProperty("email");
	        tests['User has "username" property'] = user.hasOwnProperty("username");
	        tests['User has "bio" property'] = user.hasOwnProperty("bio");
	        tests['User has "image" property'] = user.hasOwnProperty("image");
	        tests['User has "token" property'] = user.hasOwnProperty("token");
	
	        if (tests['User has "token" property']) {
	          pm.globals.set("token", user.token);
	        }
	
	        tests['Global variable "token" has been set'] =
	          pm.globals.get("token") === user.token;
        }
      }
    });sleep(delay);

    postman[Request]({
      name: "Current User",
      id: "2023-12-07-16-03-00-000",
      method: "GET",
      options: { timeout: timeout },
      address: "{{APIURL}}/user",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
        if (!environment.isIntegrationTest && is200Response) {

	        tests["Response code is 200 OK - Current User"] = is200Response;
	        var responseJSON = JSON.parse(responseBody);
	
	        tests[
	          'Response contains "user" property'
	        ] = responseJSON.hasOwnProperty("user");
	
	        var user = responseJSON.user || {};
	
	        tests['User has "email" property'] = user.hasOwnProperty("email");
	        tests['User has "username" property'] = user.hasOwnProperty("username");
	        tests['User has "bio" property'] = user.hasOwnProperty("bio");
	        tests['User has "image" property'] = user.hasOwnProperty("image");
	        tests['User has "token" property'] = user.hasOwnProperty("token");
        }
      }
    });sleep(delay);

    postman[Request]({
      name: "Update User",
      id: "2023-12-07-16-03-00-000",
      method: "PUT",
      options: { timeout: timeout },
      address: "{{APIURL}}/user",
      data: '{"user":{"email":"{{EMAIL}}"}}',
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
        if (!environment.isIntegrationTest && is200Response) {

	        tests["Response code is 200 OK - Update User"] = is200Response;
	        var responseJSON = JSON.parse(responseBody);
	
	        tests[
	          'Response contains "user" property'
	        ] = responseJSON.hasOwnProperty("user");
	
	        var user = responseJSON.user || {};
	
	        tests['User has "email" property'] = user.hasOwnProperty("email");
	        tests['User has "username" property'] = user.hasOwnProperty("username");
	        tests['User has "bio" property'] = user.hasOwnProperty("bio");
	        tests['User has "image" property'] = user.hasOwnProperty("image");
	        tests['User has "token" property'] = user.hasOwnProperty("token");
        }
      }
    });sleep(delay);
  });
  
group("articles", function() {

	postman[Request]({
      name: "Create users for create articles",
      id: "2023-12-07-16-03-00-000941",
      method: "POST",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/users",
      data:
        '{"users":{"bio":"bio","email":"email","id":"{{UNIQUE}}","image":"image","password":"password","username":"username"}}',
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      pre() {
        //console.log('Running beforeTest script...');
        // Pre-request Script
        const uniqueID = uuidv4();
        pm.globals.set("UNIQUE", uniqueID);
        //console.log(formattedDate);
      },
      post(response) {
	    //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        //console.log(pm.globals.get("UNIQUE"));
        var is201Response = responseCode.code === 201;

        tests["Response code is 201 OK - Create users for create articles"] = is201Response;

        if (!environment.isIntegrationTest && is201Response) {
          var responseJSON = JSON.parse(responseBody);

          tests[
            'Response contains "users" property'
          ] = responseJSON.hasOwnProperty("users");

          var users = responseJSON.users || {};
		  tests['users has "bio" property'] = users.hasOwnProperty("bio"); 
				
		  tests['users has "email" property'] = users.hasOwnProperty("email"); 
				
		  tests['users has "id" property'] = users.hasOwnProperty("id"); 
				
	      if(tests['users has "id" property']){
          		pm.globals.set('articles.users', users.id);
          }
           
          tests['Global variable "articles.users" has been set'] = pm.globals.get('articles.users') === users.id;
				      
		  if(tests['users has "id" property']){
                pm.globals.set('users.id', users.id);
          }
          
          tests['Global variable "users.id" has been set'] = pm.globals.get('users.id') === users.id;
		  tests['users has "image" property'] = users.hasOwnProperty("image"); 
				
		  tests['users has "password" property'] = users.hasOwnProperty("password"); 
				
		  tests['users has "username" property'] = users.hasOwnProperty("username"); 
				
        }
       }
      });sleep(delay);
        	

	postman[Request]({
      name: "Create articles for create articles",
      id: "2023-12-07-16-03-00-000941",
      method: "POST",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/articles",
      data:
        '{"articles":{"createdat":"{{LocalDateTimeNow}}","updatedat":"{{LocalDateTimeNow}}","authorId":"{{articles.users}}","body":"body","description":"description","id":"{{UNIQUE}}","slug":"slug","title":"title"}}',
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      pre() {
        //console.log('Running beforeTest script...');
        // Pre-request Script
        const uniqueID = uuidv4();
        pm.globals.set("UNIQUE", uniqueID);
        //console.log(formattedDate);
      },
      post(response) {
	    //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        //console.log(pm.globals.get("UNIQUE"));
        var is201Response = responseCode.code === 201;

        tests["Response code is 201 OK - Create articles for create articles"] = is201Response;

        if (!environment.isIntegrationTest && is201Response) {
          var responseJSON = JSON.parse(responseBody);

          tests[
            'Response contains "articles" property'
          ] = responseJSON.hasOwnProperty("articles");

          var articles = responseJSON.articles || {};
		  tests['articles has "createdat" property'] = articles.hasOwnProperty("createdat"); 
		  tests['articles of "createdat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(articles.createdat);
				
		  tests['articles has "updatedat" property'] = articles.hasOwnProperty("updatedat"); 
		  tests['articles of "updatedat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(articles.updatedat);
				
		  tests['articles has "authorId" property'] = articles.hasOwnProperty('usersAuthorIdResponse');
		  tests['articles has "body" property'] = articles.hasOwnProperty("body"); 
				
		  tests['articles has "description" property'] = articles.hasOwnProperty("description"); 
				
		  tests['articles has "id" property'] = articles.hasOwnProperty("id"); 
				
	      if(tests['articles has "id" property']){
          		pm.globals.set('articles.articles', articles.id);
          }
           
          tests['Global variable "articles.articles" has been set'] = pm.globals.get('articles.articles') === articles.id;
				      
		  if(tests['articles has "id" property']){
                pm.globals.set('articles.id', articles.id);
          }
          
          tests['Global variable "articles.id" has been set'] = pm.globals.get('articles.id') === articles.id;
		  tests['articles has "slug" property'] = articles.hasOwnProperty("slug"); 
				
		  tests['articles has "title" property'] = articles.hasOwnProperty("title"); 
				
        }
       }
      });sleep(delay);
        	
	
	postman[Request]({
      name: "Find articles By Primary Key",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/articles/find?id={{articles.id}}",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Response code is 200 OK - Find articles By Primary Key'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	                 
	        tests['Response contains "articles" property'] = responseJSON.hasOwnProperty('articles');
	        
	        var articles = responseJSON.articles || {};
	       
			tests['articles has "createdat" property'] = articles.hasOwnProperty('createdat'); 
		    tests['articles of "createdat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(articles.createdat);
		
		    if(tests['articles has "createdat" property']){
            	pm.globals.set('articles.createdat', articles.createdat);
            }
            
            tests['Global variable "articles.createdat" has been set'] = pm.globals.get('articles.createdat') === articles.createdat;
		
			tests['articles has "updatedat" property'] = articles.hasOwnProperty('updatedat'); 
		    tests['articles of "updatedat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(articles.updatedat);
		
		    if(tests['articles has "updatedat" property']){
            	pm.globals.set('articles.updatedat', articles.updatedat);
            }
            
            tests['Global variable "articles.updatedat" has been set'] = pm.globals.get('articles.updatedat') === articles.updatedat;
		
			tests['articles has "authorId" property'] = articles.hasOwnProperty('usersAuthorIdResponse');
				
		    if(tests['articles has "authorId" property']){
            	pm.globals.set('articles.authorId', articles.usersAuthorIdResponse.id);
            }
            
            tests['Global variable "articles.authorId" has been set'] = pm.globals.get('articles.authorId') === articles.usersAuthorIdResponse.id;
			
			tests['articles has "body" property'] = articles.hasOwnProperty('body'); 
		
		    if(tests['articles has "body" property']){
            	pm.globals.set('articles.body', articles.body);
            }
            
            tests['Global variable "articles.body" has been set'] = pm.globals.get('articles.body') === articles.body;
		
			tests['articles has "description" property'] = articles.hasOwnProperty('description'); 
		
		    if(tests['articles has "description" property']){
            	pm.globals.set('articles.description', articles.description);
            }
            
            tests['Global variable "articles.description" has been set'] = pm.globals.get('articles.description') === articles.description;
		
			tests['articles has "id" property'] = articles.hasOwnProperty('id'); 
		
		    if(tests['articles has "id" property']){
            	pm.globals.set('articles.id', articles.id);
            }
            
            tests['Global variable "articles.id" has been set'] = pm.globals.get('articles.id') === articles.id;
		
			tests['articles has "slug" property'] = articles.hasOwnProperty('slug'); 
		
		    if(tests['articles has "slug" property']){
            	pm.globals.set('articles.slug', articles.slug);
            }
            
            tests['Global variable "articles.slug" has been set'] = pm.globals.get('articles.slug') === articles.slug;
		
			tests['articles has "title" property'] = articles.hasOwnProperty('title'); 
		
		    if(tests['articles has "title" property']){
            	pm.globals.set('articles.title', articles.title);
            }
            
            tests['Global variable "articles.title" has been set'] = pm.globals.get('articles.title') === articles.title;
		
	    }
      }
    });sleep(delay);
    
    
    postman[Request]({
      name:
        "Find articles By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Desc",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/articles?offset=0&limit=10&filter=createdat%7Ceq%7C{{articles.createdat}}%7C%7Cupdatedat%7Ceq%7C{{articles.updatedat}}%7C%7CauthorId%7Ceq%7C{{articles.authorId}}%7C%7Cbody%7Ceq%7C{{articles.body}}%7C%7Cdescription%7Ceq%7C{{articles.description}}%7C%7Cid%7Ceq%7C{{articles.id}}%7C%7Cslug%7Ceq%7C{{articles.slug}}%7C%7Ctitle%7Ceq%7C{{articles.title}}&conjunctions=OR,OR,OR,OR,OR,OR,OR,OR&sort=-createdat,-updatedat,-authorId,-body,-description,-id,-slug,-title",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find articles By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Desc - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "articles" property'] = responseJSON.hasOwnProperty('articles');
	           
	        tests['Response contains "articlesCount" property'] = responseJSON.hasOwnProperty('articlesCount');
	                 
	        var articles = responseJSON.articles || {};
	        if (typeof articles === 'object' && Array.isArray(articles) && articles.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(articles, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'articles' has the same length as the response array length
			  	check(articles, {
			    '	Response array length should match': (arr) => arr.length === articles.length,
			  	});
	                   
				tests['articles[0] has "createdat" property'] = articles[0].hasOwnProperty('createdat');
			    tests['articles[0] of "createdat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(articles[0].createdat);
					  
				tests['articles[0] has "updatedat" property'] = articles[0].hasOwnProperty('updatedat');
			    tests['articles[0] of "updatedat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(articles[0].updatedat);
					  
				tests['articles[0] has "authorId" property'] = articles[0].hasOwnProperty('usersAuthorIdResponse');
				tests['articles[0] has "body" property'] = articles[0].hasOwnProperty('body');
					  
				tests['articles[0] has "description" property'] = articles[0].hasOwnProperty('description');
					  
				tests['articles[0] has "id" property'] = articles[0].hasOwnProperty('id');
					  
				tests['articles[0] has "slug" property'] = articles[0].hasOwnProperty('slug');
					  
				tests['articles[0] has "title" property'] = articles[0].hasOwnProperty('title');
					  
			}             
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find articles By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Asc",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/articles?offset=0&limit=10&filter=createdat%7Ceq%7C{{articles.createdat}}%7C%7Cupdatedat%7Ceq%7C{{articles.updatedat}}%7C%7CauthorId%7Ceq%7C{{articles.authorId}}%7C%7Cbody%7Ceq%7C{{articles.body}}%7C%7Cdescription%7Ceq%7C{{articles.description}}%7C%7Cid%7Ceq%7C{{articles.id}}%7C%7Cslug%7Ceq%7C{{articles.slug}}%7C%7Ctitle%7Ceq%7C{{articles.title}}&conjunctions=OR,OR,OR,OR,OR,OR,OR,OR&sort=createdat,updatedat,authorId,body,description,id,slug,title",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find articles By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Asc - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "articles" property'] = responseJSON.hasOwnProperty('articles');
	           
	        tests['Response contains "articlesCount" property'] = responseJSON.hasOwnProperty('articlesCount');
	                 
	        var articles = responseJSON.articles || {};
	        if (typeof articles === 'object' && Array.isArray(articles) && articles.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(articles, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'articles' has the same length as the response array length
			  	check(articles, {
			    '	Response array length should match': (arr) => arr.length === articles.length,
			  	});
	                   
				tests['articles[0] has "createdat" property'] = articles[0].hasOwnProperty('createdat');
			    tests['articles[0] of "createdat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(articles[0].createdat);
					  
				tests['articles[0] has "updatedat" property'] = articles[0].hasOwnProperty('updatedat');
			    tests['articles[0] of "updatedat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(articles[0].updatedat);
					  
				tests['articles[0] has "authorId" property'] = articles[0].hasOwnProperty('usersAuthorIdResponse');
				tests['articles[0] has "body" property'] = articles[0].hasOwnProperty('body');
					  
				tests['articles[0] has "description" property'] = articles[0].hasOwnProperty('description');
					  
				tests['articles[0] has "id" property'] = articles[0].hasOwnProperty('id');
					  
				tests['articles[0] has "slug" property'] = articles[0].hasOwnProperty('slug');
					  
				tests['articles[0] has "title" property'] = articles[0].hasOwnProperty('title');
					  
			}                  
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find articles By Filter With Offset0 And Limit10, All Fields, Equals, Or Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/articles?offset=0&limit=10&filter=createdat%7Ceq%7C{{articles.createdat}}%7C%7Cupdatedat%7Ceq%7C{{articles.updatedat}}%7C%7CauthorId%7Ceq%7C{{articles.authorId}}%7C%7Cbody%7Ceq%7C{{articles.body}}%7C%7Cdescription%7Ceq%7C{{articles.description}}%7C%7Cid%7Ceq%7C{{articles.id}}%7C%7Cslug%7Ceq%7C{{articles.slug}}%7C%7Ctitle%7Ceq%7C{{articles.title}}&conjunctions=OR,OR,OR,OR,OR,OR,OR,OR",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find articles By Filter With Offset0 And Limit10, All Fields, Equals, Or Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "articles" property'] = responseJSON.hasOwnProperty('articles');
	           
	        tests['Response contains "articlesCount" property'] = responseJSON.hasOwnProperty('articlesCount');
	                 
	        var articles = responseJSON.articles || {};
	        if (typeof articles === 'object' && Array.isArray(articles) && articles.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(articles, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'articles' has the same length as the response array length
			  	check(articles, {
			    '	Response array length should match': (arr) => arr.length === articles.length,
			  	});
	                   
				tests['articles[0] has "createdat" property'] = articles[0].hasOwnProperty('createdat');
			    tests['articles[0] of "createdat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(articles[0].createdat);
					  
				tests['articles[0] has "updatedat" property'] = articles[0].hasOwnProperty('updatedat');
			    tests['articles[0] of "updatedat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(articles[0].updatedat);
					  
				tests['articles[0] has "authorId" property'] = articles[0].hasOwnProperty('usersAuthorIdResponse');
				tests['articles[0] has "body" property'] = articles[0].hasOwnProperty('body');
					  
				tests['articles[0] has "description" property'] = articles[0].hasOwnProperty('description');
					  
				tests['articles[0] has "id" property'] = articles[0].hasOwnProperty('id');
					  
				tests['articles[0] has "slug" property'] = articles[0].hasOwnProperty('slug');
					  
				tests['articles[0] has "title" property'] = articles[0].hasOwnProperty('title');
					  
			}             
	      }
      }
    });sleep(delay);
    
    
    postman[Request]({
      name:
        "Find articles By Filter With Offset0 And Limit10, All Fields, Equals, And Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/articles?offset=0&limit=10&filter=createdat%7Ceq%7C{{articles.createdat}}%7C%7Cupdatedat%7Ceq%7C{{articles.updatedat}}%7C%7CauthorId%7Ceq%7C{{articles.authorId}}%7C%7Cbody%7Ceq%7C{{articles.body}}%7C%7Cdescription%7Ceq%7C{{articles.description}}%7C%7Cid%7Ceq%7C{{articles.id}}%7C%7Cslug%7Ceq%7C{{articles.slug}}%7C%7Ctitle%7Ceq%7C{{articles.title}}&conjunctions=AND,AND,AND,AND,AND,AND,AND,AND",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find articles By Filter With Offset0 And Limit10, All Fields, Equals, And Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "articles" property'] = responseJSON.hasOwnProperty('articles');
	           
	        tests['Response contains "articlesCount" property'] = responseJSON.hasOwnProperty('articlesCount');
	                 
	        var articles = responseJSON.articles || {};
	        if (typeof articles === 'object' && Array.isArray(articles) && articles.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(articles, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'articles' has the same length as the response array length
			  	check(articles, {
			    '	Response array length should match': (arr) => arr.length === articles.length,
			  	});
	                   
				tests['articles[0] has "createdat" property'] = articles[0].hasOwnProperty('createdat');
			    tests['articles[0] of "createdat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(articles[0].createdat);
					  
				tests['articles[0] has "updatedat" property'] = articles[0].hasOwnProperty('updatedat');
			    tests['articles[0] of "updatedat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(articles[0].updatedat);
					  
				tests['articles[0] has "authorId" property'] = articles[0].hasOwnProperty('usersAuthorIdResponse');
				tests['articles[0] has "body" property'] = articles[0].hasOwnProperty('body');
					  
				tests['articles[0] has "description" property'] = articles[0].hasOwnProperty('description');
					  
				tests['articles[0] has "id" property'] = articles[0].hasOwnProperty('id');
					  
				tests['articles[0] has "slug" property'] = articles[0].hasOwnProperty('slug');
					  
				tests['articles[0] has "title" property'] = articles[0].hasOwnProperty('title');
					  
			}                 
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find articles By Filter With Offset0 And Limit10, All Fields, Not Equals, Or Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/articles?offset=0&limit=10&filter=createdat%7Cneq%7C{{articles.createdat}}%7C%7Cupdatedat%7Cneq%7C{{articles.updatedat}}%7C%7CauthorId%7Cneq%7C{{articles.authorId}}%7C%7Cbody%7Cneq%7C{{articles.body}}%7C%7Cdescription%7Cneq%7C{{articles.description}}%7C%7Cid%7Cneq%7C{{articles.id}}%7C%7Cslug%7Cneq%7C{{articles.slug}}%7C%7Ctitle%7Cneq%7C{{articles.title}}&conjunctions=OR,OR,OR,OR,OR,OR,OR,OR",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find articles By Filter With Offset0 And Limit10, All Fields, Not Equals, Or Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "articles" property'] = responseJSON.hasOwnProperty('articles');
	           
	        tests['Response contains "articlesCount" property'] = responseJSON.hasOwnProperty('articlesCount');
	                 
	        var articles = responseJSON.articles || {};
            
            if (typeof articles === 'object' && Array.isArray(articles) && articles.length > 0) {
			    // Check if 'articles' is an array and has length above 0
			  	check(articles, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'articles' has the same length as the response array length
			  	check(articles, {
			    '	Response array length should match': (arr) => arr.length === articles.length,
			  	});
	                   
				tests['articles[0] has "createdat" property'] = articles[0].hasOwnProperty('createdat');
			    tests['articles[0] of "createdat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(articles[0].createdat);
					  
				tests['articles[0] has "updatedat" property'] = articles[0].hasOwnProperty('updatedat');
			    tests['articles[0] of "updatedat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(articles[0].updatedat);
					  
				tests['articles[0] has "authorId" property'] = articles[0].hasOwnProperty('usersAuthorIdResponse');
				tests['articles[0] has "body" property'] = articles[0].hasOwnProperty('body');
					  
				tests['articles[0] has "description" property'] = articles[0].hasOwnProperty('description');
					  
				tests['articles[0] has "id" property'] = articles[0].hasOwnProperty('id');
					  
				tests['articles[0] has "slug" property'] = articles[0].hasOwnProperty('slug');
					  
				tests['articles[0] has "title" property'] = articles[0].hasOwnProperty('title');
					  
			}                 
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find articles By Filter With Offset0 And Limit10, All Fields, Like, And Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/articles?offset=0&limit=10&filter=%7C%7C%7C%7CauthorId%7Clike%7C{{articles.authorId}}%7C%7Cbody%7Clike%7C{{articles.body}}%7C%7Cdescription%7Clike%7C{{articles.description}}%7C%7Cid%7Clike%7C{{articles.id}}%7C%7Cslug%7Clike%7C{{articles.slug}}%7C%7Ctitle%7Clike%7C{{articles.title}}&conjunctions=AND,AND,AND,AND,AND,AND",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find articles By Filter With Offset0 And Limit10, All Fields, Like, And Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "articles" property'] = responseJSON.hasOwnProperty('articles');
	           
	        tests['Response contains "articlesCount" property'] = responseJSON.hasOwnProperty('articlesCount');
	                 
	        var articles = responseJSON.articles || {};
	        if (typeof articles === 'object' && Array.isArray(articles) && articles.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(articles, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'articles' has the same length as the response array length
			  	check(articles, {
			    '	Response array length should match': (arr) => arr.length === articles.length,
			  	});
	                   
				tests['articles[0] has "createdat" property'] = articles[0].hasOwnProperty('createdat');
			    tests['articles[0] of "createdat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(articles[0].createdat);
					  
				tests['articles[0] has "updatedat" property'] = articles[0].hasOwnProperty('updatedat');
			    tests['articles[0] of "updatedat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(articles[0].updatedat);
					  
				tests['articles[0] has "authorId" property'] = articles[0].hasOwnProperty('usersAuthorIdResponse');
				tests['articles[0] has "body" property'] = articles[0].hasOwnProperty('body');
					  
				tests['articles[0] has "description" property'] = articles[0].hasOwnProperty('description');
					  
				tests['articles[0] has "id" property'] = articles[0].hasOwnProperty('id');
					  
				tests['articles[0] has "slug" property'] = articles[0].hasOwnProperty('slug');
					  
				tests['articles[0] has "title" property'] = articles[0].hasOwnProperty('title');
					  
			}                
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find articles By Filter With Offset0 And Limit10, All Fields, Not Like, Or Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/articles?offset=0&limit=10&filter=%7C%7C%7C%7CauthorId%7Cnlike%7C{{articles.authorId}}%7C%7Cbody%7Cnlike%7C{{articles.body}}%7C%7Cdescription%7Cnlike%7C{{articles.description}}%7C%7Cid%7Cnlike%7C{{articles.id}}%7C%7Cslug%7Cnlike%7C{{articles.slug}}%7C%7Ctitle%7Cnlike%7C{{articles.title}}&conjunctions=OR,OR,OR,OR,OR,OR",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find articles By Filter With Offset0 And Limit10, All Fields, Not Like, Or Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "articles" property'] = responseJSON.hasOwnProperty('articles');
	           
	        tests['Response contains "articlesCount" property'] = responseJSON.hasOwnProperty('articlesCount');
	                 
	        var articles = responseJSON.articles || {};

			if (typeof articles === 'object' && Array.isArray(articles) && articles.length > 0) {
			    // Check if 'articles' is an array and has length above 0
			  	check(articles, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'articles' has the same length as the response array length
			  	check(articles, {
			    '	Response array length should match': (arr) => arr.length === articles.length,
			  	});
	                   
				tests['articles[0] has "createdat" property'] = articles[0].hasOwnProperty('createdat');
			    tests['articles[0] of "createdat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(articles[0].createdat);
					  
				tests['articles[0] has "updatedat" property'] = articles[0].hasOwnProperty('updatedat');
			    tests['articles[0] of "updatedat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(articles[0].updatedat);
					  
				tests['articles[0] has "authorId" property'] = articles[0].hasOwnProperty('usersAuthorIdResponse');
				tests['articles[0] has "body" property'] = articles[0].hasOwnProperty('body');
					  
				tests['articles[0] has "description" property'] = articles[0].hasOwnProperty('description');
					  
				tests['articles[0] has "id" property'] = articles[0].hasOwnProperty('id');
					  
				tests['articles[0] has "slug" property'] = articles[0].hasOwnProperty('slug');
					  
				tests['articles[0] has "title" property'] = articles[0].hasOwnProperty('title');
					  
			}                 
	      }
      }
    });sleep(delay);
    
});    
group("comments", function() {

	postman[Request]({
      name: "Create users for create articles",
      id: "2023-12-07-16-03-00-000941",
      method: "POST",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/users",
      data:
        '{"users":{"bio":"bio","email":"email","id":"{{UNIQUE}}","image":"image","password":"password","username":"username"}}',
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      pre() {
        //console.log('Running beforeTest script...');
        // Pre-request Script
        const uniqueID = uuidv4();
        pm.globals.set("UNIQUE", uniqueID);
        //console.log(formattedDate);
      },
      post(response) {
	    //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        //console.log(pm.globals.get("UNIQUE"));
        var is201Response = responseCode.code === 201;

        tests["Response code is 201 OK - Create users for create articles"] = is201Response;

        if (!environment.isIntegrationTest && is201Response) {
          var responseJSON = JSON.parse(responseBody);

          tests[
            'Response contains "users" property'
          ] = responseJSON.hasOwnProperty("users");

          var users = responseJSON.users || {};
		  tests['users has "bio" property'] = users.hasOwnProperty("bio"); 
				
		  tests['users has "email" property'] = users.hasOwnProperty("email"); 
				
		  tests['users has "id" property'] = users.hasOwnProperty("id"); 
				
	      if(tests['users has "id" property']){
          		pm.globals.set('articles.users', users.id);
          }
           
          tests['Global variable "articles.users" has been set'] = pm.globals.get('articles.users') === users.id;
				      
		  if(tests['users has "id" property']){
                pm.globals.set('users.id', users.id);
          }
          
          tests['Global variable "users.id" has been set'] = pm.globals.get('users.id') === users.id;
		  tests['users has "image" property'] = users.hasOwnProperty("image"); 
				
		  tests['users has "password" property'] = users.hasOwnProperty("password"); 
				
		  tests['users has "username" property'] = users.hasOwnProperty("username"); 
				
        }
       }
      });sleep(delay);
        	

	postman[Request]({
      name: "Create articles for create comments",
      id: "2023-12-07-16-03-00-000941",
      method: "POST",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/articles",
      data:
        '{"articles":{"createdat":"{{LocalDateTimeNow}}","updatedat":"{{LocalDateTimeNow}}","authorId":"{{articles.users}}","body":"body","description":"description","id":"{{UNIQUE}}","slug":"slug","title":"title"}}',
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      pre() {
        //console.log('Running beforeTest script...');
        // Pre-request Script
        const uniqueID = uuidv4();
        pm.globals.set("UNIQUE", uniqueID);
        //console.log(formattedDate);
      },
      post(response) {
	    //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        //console.log(pm.globals.get("UNIQUE"));
        var is201Response = responseCode.code === 201;

        tests["Response code is 201 OK - Create articles for create comments"] = is201Response;

        if (!environment.isIntegrationTest && is201Response) {
          var responseJSON = JSON.parse(responseBody);

          tests[
            'Response contains "articles" property'
          ] = responseJSON.hasOwnProperty("articles");

          var articles = responseJSON.articles || {};
		  tests['articles has "createdat" property'] = articles.hasOwnProperty("createdat"); 
		  tests['articles of "createdat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(articles.createdat);
				
		  tests['articles has "updatedat" property'] = articles.hasOwnProperty("updatedat"); 
		  tests['articles of "updatedat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(articles.updatedat);
				
		  tests['articles has "authorId" property'] = articles.hasOwnProperty('usersAuthorIdResponse');
		  tests['articles has "body" property'] = articles.hasOwnProperty("body"); 
				
		  tests['articles has "description" property'] = articles.hasOwnProperty("description"); 
				
		  tests['articles has "id" property'] = articles.hasOwnProperty("id"); 
				
	      if(tests['articles has "id" property']){
          		pm.globals.set('comments.articles', articles.id);
          }
           
          tests['Global variable "comments.articles" has been set'] = pm.globals.get('comments.articles') === articles.id;
				      
		  if(tests['articles has "id" property']){
                pm.globals.set('articles.id', articles.id);
          }
          
          tests['Global variable "articles.id" has been set'] = pm.globals.get('articles.id') === articles.id;
		  tests['articles has "slug" property'] = articles.hasOwnProperty("slug"); 
				
		  tests['articles has "title" property'] = articles.hasOwnProperty("title"); 
				
        }
       }
      });sleep(delay);
        	

	postman[Request]({
      name: "Create users for create comments",
      id: "2023-12-07-16-03-00-000941",
      method: "POST",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/users",
      data:
        '{"users":{"bio":"bio","email":"email","id":"{{UNIQUE}}","image":"image","password":"password","username":"username"}}',
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      pre() {
        //console.log('Running beforeTest script...');
        // Pre-request Script
        const uniqueID = uuidv4();
        pm.globals.set("UNIQUE", uniqueID);
        //console.log(formattedDate);
      },
      post(response) {
	    //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        //console.log(pm.globals.get("UNIQUE"));
        var is201Response = responseCode.code === 201;

        tests["Response code is 201 OK - Create users for create comments"] = is201Response;

        if (!environment.isIntegrationTest && is201Response) {
          var responseJSON = JSON.parse(responseBody);

          tests[
            'Response contains "users" property'
          ] = responseJSON.hasOwnProperty("users");

          var users = responseJSON.users || {};
		  tests['users has "bio" property'] = users.hasOwnProperty("bio"); 
				
		  tests['users has "email" property'] = users.hasOwnProperty("email"); 
				
		  tests['users has "id" property'] = users.hasOwnProperty("id"); 
				
	      if(tests['users has "id" property']){
          		pm.globals.set('comments.users', users.id);
          }
           
          tests['Global variable "comments.users" has been set'] = pm.globals.get('comments.users') === users.id;
				      
		  if(tests['users has "id" property']){
                pm.globals.set('users.id', users.id);
          }
          
          tests['Global variable "users.id" has been set'] = pm.globals.get('users.id') === users.id;
		  tests['users has "image" property'] = users.hasOwnProperty("image"); 
				
		  tests['users has "password" property'] = users.hasOwnProperty("password"); 
				
		  tests['users has "username" property'] = users.hasOwnProperty("username"); 
				
        }
       }
      });sleep(delay);
        	

	postman[Request]({
      name: "Create comments for create comments",
      id: "2023-12-07-16-03-00-000941",
      method: "POST",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/comments",
      data:
        '{"comments":{"createdat":"{{LocalDateTimeNow}}","updatedat":"{{LocalDateTimeNow}}","articleId":"{{comments.articles}}","authorId":"{{comments.users}}","body":"body","id":"{{UNIQUE}}"}}',
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      pre() {
        //console.log('Running beforeTest script...');
        // Pre-request Script
        const uniqueID = uuidv4();
        pm.globals.set("UNIQUE", uniqueID);
        //console.log(formattedDate);
      },
      post(response) {
	    //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        //console.log(pm.globals.get("UNIQUE"));
        var is201Response = responseCode.code === 201;

        tests["Response code is 201 OK - Create comments for create comments"] = is201Response;

        if (!environment.isIntegrationTest && is201Response) {
          var responseJSON = JSON.parse(responseBody);

          tests[
            'Response contains "comments" property'
          ] = responseJSON.hasOwnProperty("comments");

          var comments = responseJSON.comments || {};
		  tests['comments has "createdat" property'] = comments.hasOwnProperty("createdat"); 
		  tests['comments of "createdat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(comments.createdat);
				
		  tests['comments has "updatedat" property'] = comments.hasOwnProperty("updatedat"); 
		  tests['comments of "updatedat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(comments.updatedat);
				
		  tests['comments has "articleId" property'] = comments.hasOwnProperty('articlesArticleIdResponse');
		  tests['comments has "authorId" property'] = comments.hasOwnProperty('usersAuthorIdResponse');
		  tests['comments has "body" property'] = comments.hasOwnProperty("body"); 
				
		  tests['comments has "id" property'] = comments.hasOwnProperty("id"); 
				
	      if(tests['comments has "id" property']){
          		pm.globals.set('comments.comments', comments.id);
          }
           
          tests['Global variable "comments.comments" has been set'] = pm.globals.get('comments.comments') === comments.id;
				      
		  if(tests['comments has "id" property']){
                pm.globals.set('comments.id', comments.id);
          }
          
          tests['Global variable "comments.id" has been set'] = pm.globals.get('comments.id') === comments.id;
        }
       }
      });sleep(delay);
        	
	
	postman[Request]({
      name: "Find comments By Primary Key",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/comments/find?id={{comments.id}}",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Response code is 200 OK - Find comments By Primary Key'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	                 
	        tests['Response contains "comments" property'] = responseJSON.hasOwnProperty('comments');
	        
	        var comments = responseJSON.comments || {};
	       
			tests['comments has "createdat" property'] = comments.hasOwnProperty('createdat'); 
		    tests['comments of "createdat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(comments.createdat);
		
		    if(tests['comments has "createdat" property']){
            	pm.globals.set('comments.createdat', comments.createdat);
            }
            
            tests['Global variable "comments.createdat" has been set'] = pm.globals.get('comments.createdat') === comments.createdat;
		
			tests['comments has "updatedat" property'] = comments.hasOwnProperty('updatedat'); 
		    tests['comments of "updatedat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(comments.updatedat);
		
		    if(tests['comments has "updatedat" property']){
            	pm.globals.set('comments.updatedat', comments.updatedat);
            }
            
            tests['Global variable "comments.updatedat" has been set'] = pm.globals.get('comments.updatedat') === comments.updatedat;
		
			tests['comments has "articleId" property'] = comments.hasOwnProperty('articlesArticleIdResponse');
				
		    if(tests['comments has "articleId" property']){
            	pm.globals.set('comments.articleId', comments.articlesArticleIdResponse.id);
            }
            
            tests['Global variable "comments.articleId" has been set'] = pm.globals.get('comments.articleId') === comments.articlesArticleIdResponse.id;
			
			tests['comments has "authorId" property'] = comments.hasOwnProperty('usersAuthorIdResponse');
				
		    if(tests['comments has "authorId" property']){
            	pm.globals.set('comments.authorId', comments.usersAuthorIdResponse.id);
            }
            
            tests['Global variable "comments.authorId" has been set'] = pm.globals.get('comments.authorId') === comments.usersAuthorIdResponse.id;
			
			tests['comments has "body" property'] = comments.hasOwnProperty('body'); 
		
		    if(tests['comments has "body" property']){
            	pm.globals.set('comments.body', comments.body);
            }
            
            tests['Global variable "comments.body" has been set'] = pm.globals.get('comments.body') === comments.body;
		
			tests['comments has "id" property'] = comments.hasOwnProperty('id'); 
		
		    if(tests['comments has "id" property']){
            	pm.globals.set('comments.id', comments.id);
            }
            
            tests['Global variable "comments.id" has been set'] = pm.globals.get('comments.id') === comments.id;
		
	    }
      }
    });sleep(delay);
    
    
    postman[Request]({
      name:
        "Find comments By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Desc",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/comments?offset=0&limit=10&filter=createdat%7Ceq%7C{{comments.createdat}}%7C%7Cupdatedat%7Ceq%7C{{comments.updatedat}}%7C%7CarticleId%7Ceq%7C{{comments.articleId}}%7C%7CauthorId%7Ceq%7C{{comments.authorId}}%7C%7Cbody%7Ceq%7C{{comments.body}}%7C%7Cid%7Ceq%7C{{comments.id}}&conjunctions=OR,OR,OR,OR,OR,OR&sort=-createdat,-updatedat,-articleId,-authorId,-body,-id",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find comments By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Desc - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "comments" property'] = responseJSON.hasOwnProperty('comments');
	           
	        tests['Response contains "commentsCount" property'] = responseJSON.hasOwnProperty('commentsCount');
	                 
	        var comments = responseJSON.comments || {};
	        if (typeof comments === 'object' && Array.isArray(comments) && comments.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(comments, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'comments' has the same length as the response array length
			  	check(comments, {
			    '	Response array length should match': (arr) => arr.length === comments.length,
			  	});
	                   
				tests['comments[0] has "createdat" property'] = comments[0].hasOwnProperty('createdat');
			    tests['comments[0] of "createdat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(comments[0].createdat);
					  
				tests['comments[0] has "updatedat" property'] = comments[0].hasOwnProperty('updatedat');
			    tests['comments[0] of "updatedat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(comments[0].updatedat);
					  
				tests['comments[0] has "articleId" property'] = comments[0].hasOwnProperty('articlesArticleIdResponse');
				tests['comments[0] has "authorId" property'] = comments[0].hasOwnProperty('usersAuthorIdResponse');
				tests['comments[0] has "body" property'] = comments[0].hasOwnProperty('body');
					  
				tests['comments[0] has "id" property'] = comments[0].hasOwnProperty('id');
					  
			}             
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find comments By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Asc",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/comments?offset=0&limit=10&filter=createdat%7Ceq%7C{{comments.createdat}}%7C%7Cupdatedat%7Ceq%7C{{comments.updatedat}}%7C%7CarticleId%7Ceq%7C{{comments.articleId}}%7C%7CauthorId%7Ceq%7C{{comments.authorId}}%7C%7Cbody%7Ceq%7C{{comments.body}}%7C%7Cid%7Ceq%7C{{comments.id}}&conjunctions=OR,OR,OR,OR,OR,OR&sort=createdat,updatedat,articleId,authorId,body,id",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find comments By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Asc - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "comments" property'] = responseJSON.hasOwnProperty('comments');
	           
	        tests['Response contains "commentsCount" property'] = responseJSON.hasOwnProperty('commentsCount');
	                 
	        var comments = responseJSON.comments || {};
	        if (typeof comments === 'object' && Array.isArray(comments) && comments.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(comments, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'comments' has the same length as the response array length
			  	check(comments, {
			    '	Response array length should match': (arr) => arr.length === comments.length,
			  	});
	                   
				tests['comments[0] has "createdat" property'] = comments[0].hasOwnProperty('createdat');
			    tests['comments[0] of "createdat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(comments[0].createdat);
					  
				tests['comments[0] has "updatedat" property'] = comments[0].hasOwnProperty('updatedat');
			    tests['comments[0] of "updatedat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(comments[0].updatedat);
					  
				tests['comments[0] has "articleId" property'] = comments[0].hasOwnProperty('articlesArticleIdResponse');
				tests['comments[0] has "authorId" property'] = comments[0].hasOwnProperty('usersAuthorIdResponse');
				tests['comments[0] has "body" property'] = comments[0].hasOwnProperty('body');
					  
				tests['comments[0] has "id" property'] = comments[0].hasOwnProperty('id');
					  
			}                  
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find comments By Filter With Offset0 And Limit10, All Fields, Equals, Or Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/comments?offset=0&limit=10&filter=createdat%7Ceq%7C{{comments.createdat}}%7C%7Cupdatedat%7Ceq%7C{{comments.updatedat}}%7C%7CarticleId%7Ceq%7C{{comments.articleId}}%7C%7CauthorId%7Ceq%7C{{comments.authorId}}%7C%7Cbody%7Ceq%7C{{comments.body}}%7C%7Cid%7Ceq%7C{{comments.id}}&conjunctions=OR,OR,OR,OR,OR,OR",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find comments By Filter With Offset0 And Limit10, All Fields, Equals, Or Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "comments" property'] = responseJSON.hasOwnProperty('comments');
	           
	        tests['Response contains "commentsCount" property'] = responseJSON.hasOwnProperty('commentsCount');
	                 
	        var comments = responseJSON.comments || {};
	        if (typeof comments === 'object' && Array.isArray(comments) && comments.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(comments, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'comments' has the same length as the response array length
			  	check(comments, {
			    '	Response array length should match': (arr) => arr.length === comments.length,
			  	});
	                   
				tests['comments[0] has "createdat" property'] = comments[0].hasOwnProperty('createdat');
			    tests['comments[0] of "createdat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(comments[0].createdat);
					  
				tests['comments[0] has "updatedat" property'] = comments[0].hasOwnProperty('updatedat');
			    tests['comments[0] of "updatedat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(comments[0].updatedat);
					  
				tests['comments[0] has "articleId" property'] = comments[0].hasOwnProperty('articlesArticleIdResponse');
				tests['comments[0] has "authorId" property'] = comments[0].hasOwnProperty('usersAuthorIdResponse');
				tests['comments[0] has "body" property'] = comments[0].hasOwnProperty('body');
					  
				tests['comments[0] has "id" property'] = comments[0].hasOwnProperty('id');
					  
			}             
	      }
      }
    });sleep(delay);
    
    
    postman[Request]({
      name:
        "Find comments By Filter With Offset0 And Limit10, All Fields, Equals, And Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/comments?offset=0&limit=10&filter=createdat%7Ceq%7C{{comments.createdat}}%7C%7Cupdatedat%7Ceq%7C{{comments.updatedat}}%7C%7CarticleId%7Ceq%7C{{comments.articleId}}%7C%7CauthorId%7Ceq%7C{{comments.authorId}}%7C%7Cbody%7Ceq%7C{{comments.body}}%7C%7Cid%7Ceq%7C{{comments.id}}&conjunctions=AND,AND,AND,AND,AND,AND",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find comments By Filter With Offset0 And Limit10, All Fields, Equals, And Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "comments" property'] = responseJSON.hasOwnProperty('comments');
	           
	        tests['Response contains "commentsCount" property'] = responseJSON.hasOwnProperty('commentsCount');
	                 
	        var comments = responseJSON.comments || {};
	        if (typeof comments === 'object' && Array.isArray(comments) && comments.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(comments, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'comments' has the same length as the response array length
			  	check(comments, {
			    '	Response array length should match': (arr) => arr.length === comments.length,
			  	});
	                   
				tests['comments[0] has "createdat" property'] = comments[0].hasOwnProperty('createdat');
			    tests['comments[0] of "createdat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(comments[0].createdat);
					  
				tests['comments[0] has "updatedat" property'] = comments[0].hasOwnProperty('updatedat');
			    tests['comments[0] of "updatedat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(comments[0].updatedat);
					  
				tests['comments[0] has "articleId" property'] = comments[0].hasOwnProperty('articlesArticleIdResponse');
				tests['comments[0] has "authorId" property'] = comments[0].hasOwnProperty('usersAuthorIdResponse');
				tests['comments[0] has "body" property'] = comments[0].hasOwnProperty('body');
					  
				tests['comments[0] has "id" property'] = comments[0].hasOwnProperty('id');
					  
			}                 
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find comments By Filter With Offset0 And Limit10, All Fields, Not Equals, Or Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/comments?offset=0&limit=10&filter=createdat%7Cneq%7C{{comments.createdat}}%7C%7Cupdatedat%7Cneq%7C{{comments.updatedat}}%7C%7CarticleId%7Cneq%7C{{comments.articleId}}%7C%7CauthorId%7Cneq%7C{{comments.authorId}}%7C%7Cbody%7Cneq%7C{{comments.body}}%7C%7Cid%7Cneq%7C{{comments.id}}&conjunctions=OR,OR,OR,OR,OR,OR",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find comments By Filter With Offset0 And Limit10, All Fields, Not Equals, Or Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "comments" property'] = responseJSON.hasOwnProperty('comments');
	           
	        tests['Response contains "commentsCount" property'] = responseJSON.hasOwnProperty('commentsCount');
	                 
	        var comments = responseJSON.comments || {};
            
            if (typeof comments === 'object' && Array.isArray(comments) && comments.length > 0) {
			    // Check if 'articles' is an array and has length above 0
			  	check(comments, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'comments' has the same length as the response array length
			  	check(comments, {
			    '	Response array length should match': (arr) => arr.length === comments.length,
			  	});
	                   
				tests['comments[0] has "createdat" property'] = comments[0].hasOwnProperty('createdat');
			    tests['comments[0] of "createdat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(comments[0].createdat);
					  
				tests['comments[0] has "updatedat" property'] = comments[0].hasOwnProperty('updatedat');
			    tests['comments[0] of "updatedat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(comments[0].updatedat);
					  
				tests['comments[0] has "articleId" property'] = comments[0].hasOwnProperty('articlesArticleIdResponse');
				tests['comments[0] has "authorId" property'] = comments[0].hasOwnProperty('usersAuthorIdResponse');
				tests['comments[0] has "body" property'] = comments[0].hasOwnProperty('body');
					  
				tests['comments[0] has "id" property'] = comments[0].hasOwnProperty('id');
					  
			}                 
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find comments By Filter With Offset0 And Limit10, All Fields, Like, And Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/comments?offset=0&limit=10&filter=%7C%7C%7C%7CarticleId%7Clike%7C{{comments.articleId}}%7C%7CauthorId%7Clike%7C{{comments.authorId}}%7C%7Cbody%7Clike%7C{{comments.body}}%7C%7Cid%7Clike%7C{{comments.id}}&conjunctions=AND,AND,AND,AND",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find comments By Filter With Offset0 And Limit10, All Fields, Like, And Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "comments" property'] = responseJSON.hasOwnProperty('comments');
	           
	        tests['Response contains "commentsCount" property'] = responseJSON.hasOwnProperty('commentsCount');
	                 
	        var comments = responseJSON.comments || {};
	        if (typeof comments === 'object' && Array.isArray(comments) && comments.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(comments, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'comments' has the same length as the response array length
			  	check(comments, {
			    '	Response array length should match': (arr) => arr.length === comments.length,
			  	});
	                   
				tests['comments[0] has "createdat" property'] = comments[0].hasOwnProperty('createdat');
			    tests['comments[0] of "createdat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(comments[0].createdat);
					  
				tests['comments[0] has "updatedat" property'] = comments[0].hasOwnProperty('updatedat');
			    tests['comments[0] of "updatedat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(comments[0].updatedat);
					  
				tests['comments[0] has "articleId" property'] = comments[0].hasOwnProperty('articlesArticleIdResponse');
				tests['comments[0] has "authorId" property'] = comments[0].hasOwnProperty('usersAuthorIdResponse');
				tests['comments[0] has "body" property'] = comments[0].hasOwnProperty('body');
					  
				tests['comments[0] has "id" property'] = comments[0].hasOwnProperty('id');
					  
			}                
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find comments By Filter With Offset0 And Limit10, All Fields, Not Like, Or Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/comments?offset=0&limit=10&filter=%7C%7C%7C%7CarticleId%7Cnlike%7C{{comments.articleId}}%7C%7CauthorId%7Cnlike%7C{{comments.authorId}}%7C%7Cbody%7Cnlike%7C{{comments.body}}%7C%7Cid%7Cnlike%7C{{comments.id}}&conjunctions=OR,OR,OR,OR",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find comments By Filter With Offset0 And Limit10, All Fields, Not Like, Or Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "comments" property'] = responseJSON.hasOwnProperty('comments');
	           
	        tests['Response contains "commentsCount" property'] = responseJSON.hasOwnProperty('commentsCount');
	                 
	        var comments = responseJSON.comments || {};

			if (typeof comments === 'object' && Array.isArray(comments) && comments.length > 0) {
			    // Check if 'articles' is an array and has length above 0
			  	check(comments, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'comments' has the same length as the response array length
			  	check(comments, {
			    '	Response array length should match': (arr) => arr.length === comments.length,
			  	});
	                   
				tests['comments[0] has "createdat" property'] = comments[0].hasOwnProperty('createdat');
			    tests['comments[0] of "createdat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(comments[0].createdat);
					  
				tests['comments[0] has "updatedat" property'] = comments[0].hasOwnProperty('updatedat');
			    tests['comments[0] of "updatedat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(comments[0].updatedat);
					  
				tests['comments[0] has "articleId" property'] = comments[0].hasOwnProperty('articlesArticleIdResponse');
				tests['comments[0] has "authorId" property'] = comments[0].hasOwnProperty('usersAuthorIdResponse');
				tests['comments[0] has "body" property'] = comments[0].hasOwnProperty('body');
					  
				tests['comments[0] has "id" property'] = comments[0].hasOwnProperty('id');
					  
			}                 
	      }
      }
    });sleep(delay);
    
});    
group("favorite_relationship", function() {

	postman[Request]({
      name: "Create users for create articles",
      id: "2023-12-07-16-03-00-000941",
      method: "POST",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/users",
      data:
        '{"users":{"bio":"bio","email":"email","id":"{{UNIQUE}}","image":"image","password":"password","username":"username"}}',
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      pre() {
        //console.log('Running beforeTest script...');
        // Pre-request Script
        const uniqueID = uuidv4();
        pm.globals.set("UNIQUE", uniqueID);
        //console.log(formattedDate);
      },
      post(response) {
	    //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        //console.log(pm.globals.get("UNIQUE"));
        var is201Response = responseCode.code === 201;

        tests["Response code is 201 OK - Create users for create articles"] = is201Response;

        if (!environment.isIntegrationTest && is201Response) {
          var responseJSON = JSON.parse(responseBody);

          tests[
            'Response contains "users" property'
          ] = responseJSON.hasOwnProperty("users");

          var users = responseJSON.users || {};
		  tests['users has "bio" property'] = users.hasOwnProperty("bio"); 
				
		  tests['users has "email" property'] = users.hasOwnProperty("email"); 
				
		  tests['users has "id" property'] = users.hasOwnProperty("id"); 
				
	      if(tests['users has "id" property']){
          		pm.globals.set('articles.users', users.id);
          }
           
          tests['Global variable "articles.users" has been set'] = pm.globals.get('articles.users') === users.id;
				      
		  if(tests['users has "id" property']){
                pm.globals.set('users.id', users.id);
          }
          
          tests['Global variable "users.id" has been set'] = pm.globals.get('users.id') === users.id;
		  tests['users has "image" property'] = users.hasOwnProperty("image"); 
				
		  tests['users has "password" property'] = users.hasOwnProperty("password"); 
				
		  tests['users has "username" property'] = users.hasOwnProperty("username"); 
				
        }
       }
      });sleep(delay);
        	

	postman[Request]({
      name: "Create articles for create favorite_relationship",
      id: "2023-12-07-16-03-00-000941",
      method: "POST",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/articles",
      data:
        '{"articles":{"createdat":"{{LocalDateTimeNow}}","updatedat":"{{LocalDateTimeNow}}","authorId":"{{articles.users}}","body":"body","description":"description","id":"{{UNIQUE}}","slug":"slug","title":"title"}}',
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      pre() {
        //console.log('Running beforeTest script...');
        // Pre-request Script
        const uniqueID = uuidv4();
        pm.globals.set("UNIQUE", uniqueID);
        //console.log(formattedDate);
      },
      post(response) {
	    //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        //console.log(pm.globals.get("UNIQUE"));
        var is201Response = responseCode.code === 201;

        tests["Response code is 201 OK - Create articles for create favorite_relationship"] = is201Response;

        if (!environment.isIntegrationTest && is201Response) {
          var responseJSON = JSON.parse(responseBody);

          tests[
            'Response contains "articles" property'
          ] = responseJSON.hasOwnProperty("articles");

          var articles = responseJSON.articles || {};
		  tests['articles has "createdat" property'] = articles.hasOwnProperty("createdat"); 
		  tests['articles of "createdat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(articles.createdat);
				
		  tests['articles has "updatedat" property'] = articles.hasOwnProperty("updatedat"); 
		  tests['articles of "updatedat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(articles.updatedat);
				
		  tests['articles has "authorId" property'] = articles.hasOwnProperty('usersAuthorIdResponse');
		  tests['articles has "body" property'] = articles.hasOwnProperty("body"); 
				
		  tests['articles has "description" property'] = articles.hasOwnProperty("description"); 
				
		  tests['articles has "id" property'] = articles.hasOwnProperty("id"); 
				
	      if(tests['articles has "id" property']){
          		pm.globals.set('favorite_relationship.articles', articles.id);
          }
           
          tests['Global variable "favorite_relationship.articles" has been set'] = pm.globals.get('favorite_relationship.articles') === articles.id;
				      
		  if(tests['articles has "id" property']){
                pm.globals.set('articles.id', articles.id);
          }
          
          tests['Global variable "articles.id" has been set'] = pm.globals.get('articles.id') === articles.id;
		  tests['articles has "slug" property'] = articles.hasOwnProperty("slug"); 
				
		  tests['articles has "title" property'] = articles.hasOwnProperty("title"); 
				
        }
       }
      });sleep(delay);
        	

	postman[Request]({
      name: "Create users for create favorite_relationship",
      id: "2023-12-07-16-03-00-000941",
      method: "POST",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/users",
      data:
        '{"users":{"bio":"bio","email":"email","id":"{{UNIQUE}}","image":"image","password":"password","username":"username"}}',
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      pre() {
        //console.log('Running beforeTest script...');
        // Pre-request Script
        const uniqueID = uuidv4();
        pm.globals.set("UNIQUE", uniqueID);
        //console.log(formattedDate);
      },
      post(response) {
	    //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        //console.log(pm.globals.get("UNIQUE"));
        var is201Response = responseCode.code === 201;

        tests["Response code is 201 OK - Create users for create favorite_relationship"] = is201Response;

        if (!environment.isIntegrationTest && is201Response) {
          var responseJSON = JSON.parse(responseBody);

          tests[
            'Response contains "users" property'
          ] = responseJSON.hasOwnProperty("users");

          var users = responseJSON.users || {};
		  tests['users has "bio" property'] = users.hasOwnProperty("bio"); 
				
		  tests['users has "email" property'] = users.hasOwnProperty("email"); 
				
		  tests['users has "id" property'] = users.hasOwnProperty("id"); 
				
	      if(tests['users has "id" property']){
          		pm.globals.set('favorite_relationship.users', users.id);
          }
           
          tests['Global variable "favorite_relationship.users" has been set'] = pm.globals.get('favorite_relationship.users') === users.id;
				      
		  if(tests['users has "id" property']){
                pm.globals.set('users.id', users.id);
          }
          
          tests['Global variable "users.id" has been set'] = pm.globals.get('users.id') === users.id;
		  tests['users has "image" property'] = users.hasOwnProperty("image"); 
				
		  tests['users has "password" property'] = users.hasOwnProperty("password"); 
				
		  tests['users has "username" property'] = users.hasOwnProperty("username"); 
				
        }
       }
      });sleep(delay);
        	

	postman[Request]({
      name: "Create favorite_relationship for create favorite_relationship",
      id: "2023-12-07-16-03-00-000941",
      method: "POST",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/favoriteRelationship",
      data:
        '{"favoriteRelationship":{"articleId":"{{favorite_relationship.articles}}","userId":"{{favorite_relationship.users}}"}}',
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      pre() {
        //console.log('Running beforeTest script...');
        // Pre-request Script
        const uniqueID = uuidv4();
        pm.globals.set("UNIQUE", uniqueID);
        //console.log(formattedDate);
      },
      post(response) {
	    //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        //console.log(pm.globals.get("UNIQUE"));
        var is201Response = responseCode.code === 201;

        tests["Response code is 201 OK - Create favorite_relationship for create favorite_relationship"] = is201Response;

        if (!environment.isIntegrationTest && is201Response) {
          var responseJSON = JSON.parse(responseBody);

          tests[
            'Response contains "favoriteRelationship" property'
          ] = responseJSON.hasOwnProperty("favoriteRelationship");

          var favoriteRelationship = responseJSON.favoriteRelationship || {};
		  tests['favoriteRelationship has "articleId" property'] = favoriteRelationship.hasOwnProperty('articlesArticleIdResponse');
		  
		  if(tests['favoriteRelationship has "articleId" property']){
                pm.globals.set('favoriteRelationship.articleId', favoriteRelationship.articlesArticleIdResponse.id);
           }
                  
          tests['Global variable "favoriteRelationship.articleId" has been set'] = pm.globals.get('favoriteRelationship.articleId') === favoriteRelationship.articlesArticleIdResponse.id;
		  tests['favoriteRelationship has "userId" property'] = favoriteRelationship.hasOwnProperty('usersUserIdResponse');
		  
		  if(tests['favoriteRelationship has "userId" property']){
                pm.globals.set('favoriteRelationship.userId', favoriteRelationship.usersUserIdResponse.id);
           }
                  
          tests['Global variable "favoriteRelationship.userId" has been set'] = pm.globals.get('favoriteRelationship.userId') === favoriteRelationship.usersUserIdResponse.id;
        }
       }
      });sleep(delay);
        	
	
	postman[Request]({
      name: "Find favoriteRelationship By Primary Key",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/favoriteRelationship/find?articleId={{favoriteRelationship.articleId}}&userId={{favoriteRelationship.userId}}",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Response code is 200 OK - Find favoriteRelationship By Primary Key'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	                 
	        tests['Response contains "favoriteRelationship" property'] = responseJSON.hasOwnProperty('favoriteRelationship');
	        
	        var favoriteRelationship = responseJSON.favoriteRelationship || {};
	       
			tests['favoriteRelationship has "articleId" property'] = favoriteRelationship.hasOwnProperty('articlesArticleIdResponse');
				
		    if(tests['favoriteRelationship has "articleId" property']){
            	pm.globals.set('favoriteRelationship.articleId', favoriteRelationship.articlesArticleIdResponse.id);
            }
            
            tests['Global variable "favoriteRelationship.articleId" has been set'] = pm.globals.get('favoriteRelationship.articleId') === favoriteRelationship.articlesArticleIdResponse.id;
			
			tests['favoriteRelationship has "userId" property'] = favoriteRelationship.hasOwnProperty('usersUserIdResponse');
				
		    if(tests['favoriteRelationship has "userId" property']){
            	pm.globals.set('favoriteRelationship.userId', favoriteRelationship.usersUserIdResponse.id);
            }
            
            tests['Global variable "favoriteRelationship.userId" has been set'] = pm.globals.get('favoriteRelationship.userId') === favoriteRelationship.usersUserIdResponse.id;
			
	    }
      }
    });sleep(delay);
    
    
    postman[Request]({
      name:
        "Find favorite_relationship By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Desc",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/favoriteRelationship?offset=0&limit=10&filter=articleId%7Ceq%7C{{favoriteRelationship.articleId}}%7C%7CuserId%7Ceq%7C{{favoriteRelationship.userId}}&conjunctions=OR,OR&sort=-articleId,-userId",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find favorite_relationship By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Desc - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "favoriteRelationship" property'] = responseJSON.hasOwnProperty('favoriteRelationship');
	           
	        tests['Response contains "favoriteRelationshipCount" property'] = responseJSON.hasOwnProperty('favoriteRelationshipCount');
	                 
	        var favoriteRelationship = responseJSON.favoriteRelationship || {};
	        if (typeof favoriteRelationship === 'object' && Array.isArray(favoriteRelationship) && favoriteRelationship.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(favoriteRelationship, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'favoriteRelationship' has the same length as the response array length
			  	check(favoriteRelationship, {
			    '	Response array length should match': (arr) => arr.length === favoriteRelationship.length,
			  	});
	                   
				tests['favoriteRelationship[0] has "articleId" property'] = favoriteRelationship[0].hasOwnProperty('articlesArticleIdResponse');
				tests['favoriteRelationship[0] has "userId" property'] = favoriteRelationship[0].hasOwnProperty('usersUserIdResponse');
			}             
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find favorite_relationship By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Asc",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/favoriteRelationship?offset=0&limit=10&filter=articleId%7Ceq%7C{{favoriteRelationship.articleId}}%7C%7CuserId%7Ceq%7C{{favoriteRelationship.userId}}&conjunctions=OR,OR&sort=articleId,userId",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find favorite_relationship By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Asc - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "favoriteRelationship" property'] = responseJSON.hasOwnProperty('favoriteRelationship');
	           
	        tests['Response contains "favoriteRelationshipCount" property'] = responseJSON.hasOwnProperty('favoriteRelationshipCount');
	                 
	        var favoriteRelationship = responseJSON.favoriteRelationship || {};
	        if (typeof favoriteRelationship === 'object' && Array.isArray(favoriteRelationship) && favoriteRelationship.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(favoriteRelationship, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'favoriteRelationship' has the same length as the response array length
			  	check(favoriteRelationship, {
			    '	Response array length should match': (arr) => arr.length === favoriteRelationship.length,
			  	});
	                   
				tests['favoriteRelationship[0] has "articleId" property'] = favoriteRelationship[0].hasOwnProperty('articlesArticleIdResponse');
				tests['favoriteRelationship[0] has "userId" property'] = favoriteRelationship[0].hasOwnProperty('usersUserIdResponse');
			}                  
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find favorite_relationship By Filter With Offset0 And Limit10, All Fields, Equals, Or Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/favoriteRelationship?offset=0&limit=10&filter=articleId%7Ceq%7C{{favoriteRelationship.articleId}}%7C%7CuserId%7Ceq%7C{{favoriteRelationship.userId}}&conjunctions=OR,OR",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find favorite_relationship By Filter With Offset0 And Limit10, All Fields, Equals, Or Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "favoriteRelationship" property'] = responseJSON.hasOwnProperty('favoriteRelationship');
	           
	        tests['Response contains "favoriteRelationshipCount" property'] = responseJSON.hasOwnProperty('favoriteRelationshipCount');
	                 
	        var favoriteRelationship = responseJSON.favoriteRelationship || {};
	        if (typeof favoriteRelationship === 'object' && Array.isArray(favoriteRelationship) && favoriteRelationship.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(favoriteRelationship, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'favoriteRelationship' has the same length as the response array length
			  	check(favoriteRelationship, {
			    '	Response array length should match': (arr) => arr.length === favoriteRelationship.length,
			  	});
	                   
				tests['favoriteRelationship[0] has "articleId" property'] = favoriteRelationship[0].hasOwnProperty('articlesArticleIdResponse');
				tests['favoriteRelationship[0] has "userId" property'] = favoriteRelationship[0].hasOwnProperty('usersUserIdResponse');
			}             
	      }
      }
    });sleep(delay);
    
    
    postman[Request]({
      name:
        "Find favorite_relationship By Filter With Offset0 And Limit10, All Fields, Equals, And Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/favoriteRelationship?offset=0&limit=10&filter=articleId%7Ceq%7C{{favoriteRelationship.articleId}}%7C%7CuserId%7Ceq%7C{{favoriteRelationship.userId}}&conjunctions=AND,AND",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find favorite_relationship By Filter With Offset0 And Limit10, All Fields, Equals, And Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "favoriteRelationship" property'] = responseJSON.hasOwnProperty('favoriteRelationship');
	           
	        tests['Response contains "favoriteRelationshipCount" property'] = responseJSON.hasOwnProperty('favoriteRelationshipCount');
	                 
	        var favoriteRelationship = responseJSON.favoriteRelationship || {};
	        if (typeof favoriteRelationship === 'object' && Array.isArray(favoriteRelationship) && favoriteRelationship.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(favoriteRelationship, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'favoriteRelationship' has the same length as the response array length
			  	check(favoriteRelationship, {
			    '	Response array length should match': (arr) => arr.length === favoriteRelationship.length,
			  	});
	                   
				tests['favoriteRelationship[0] has "articleId" property'] = favoriteRelationship[0].hasOwnProperty('articlesArticleIdResponse');
				tests['favoriteRelationship[0] has "userId" property'] = favoriteRelationship[0].hasOwnProperty('usersUserIdResponse');
			}                 
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find favorite_relationship By Filter With Offset0 And Limit10, All Fields, Not Equals, Or Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/favoriteRelationship?offset=0&limit=10&filter=articleId%7Cneq%7C{{favoriteRelationship.articleId}}%7C%7CuserId%7Cneq%7C{{favoriteRelationship.userId}}&conjunctions=OR,OR",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find favorite_relationship By Filter With Offset0 And Limit10, All Fields, Not Equals, Or Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "favoriteRelationship" property'] = responseJSON.hasOwnProperty('favoriteRelationship');
	           
	        tests['Response contains "favoriteRelationshipCount" property'] = responseJSON.hasOwnProperty('favoriteRelationshipCount');
	                 
	        var favoriteRelationship = responseJSON.favoriteRelationship || {};
            
            if (typeof favoriteRelationship === 'object' && Array.isArray(favoriteRelationship) && favoriteRelationship.length > 0) {
			    // Check if 'articles' is an array and has length above 0
			  	check(favoriteRelationship, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'favoriteRelationship' has the same length as the response array length
			  	check(favoriteRelationship, {
			    '	Response array length should match': (arr) => arr.length === favoriteRelationship.length,
			  	});
	                   
				tests['favoriteRelationship[0] has "articleId" property'] = favoriteRelationship[0].hasOwnProperty('articlesArticleIdResponse');
				tests['favoriteRelationship[0] has "userId" property'] = favoriteRelationship[0].hasOwnProperty('usersUserIdResponse');
			}                 
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find favorite_relationship By Filter With Offset0 And Limit10, All Fields, Like, And Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/favoriteRelationship?offset=0&limit=10&filter=articleId%7Clike%7C{{favoriteRelationship.articleId}}%7C%7CuserId%7Clike%7C{{favoriteRelationship.userId}}&conjunctions=AND,AND",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find favorite_relationship By Filter With Offset0 And Limit10, All Fields, Like, And Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "favoriteRelationship" property'] = responseJSON.hasOwnProperty('favoriteRelationship');
	           
	        tests['Response contains "favoriteRelationshipCount" property'] = responseJSON.hasOwnProperty('favoriteRelationshipCount');
	                 
	        var favoriteRelationship = responseJSON.favoriteRelationship || {};
	        if (typeof favoriteRelationship === 'object' && Array.isArray(favoriteRelationship) && favoriteRelationship.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(favoriteRelationship, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'favoriteRelationship' has the same length as the response array length
			  	check(favoriteRelationship, {
			    '	Response array length should match': (arr) => arr.length === favoriteRelationship.length,
			  	});
	                   
				tests['favoriteRelationship[0] has "articleId" property'] = favoriteRelationship[0].hasOwnProperty('articlesArticleIdResponse');
				tests['favoriteRelationship[0] has "userId" property'] = favoriteRelationship[0].hasOwnProperty('usersUserIdResponse');
			}                
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find favorite_relationship By Filter With Offset0 And Limit10, All Fields, Not Like, Or Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/favoriteRelationship?offset=0&limit=10&filter=articleId%7Cnlike%7C{{favoriteRelationship.articleId}}%7C%7CuserId%7Cnlike%7C{{favoriteRelationship.userId}}&conjunctions=OR,OR",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find favorite_relationship By Filter With Offset0 And Limit10, All Fields, Not Like, Or Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "favoriteRelationship" property'] = responseJSON.hasOwnProperty('favoriteRelationship');
	           
	        tests['Response contains "favoriteRelationshipCount" property'] = responseJSON.hasOwnProperty('favoriteRelationshipCount');
	                 
	        var favoriteRelationship = responseJSON.favoriteRelationship || {};

			if (typeof favoriteRelationship === 'object' && Array.isArray(favoriteRelationship) && favoriteRelationship.length > 0) {
			    // Check if 'articles' is an array and has length above 0
			  	check(favoriteRelationship, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'favoriteRelationship' has the same length as the response array length
			  	check(favoriteRelationship, {
			    '	Response array length should match': (arr) => arr.length === favoriteRelationship.length,
			  	});
	                   
				tests['favoriteRelationship[0] has "articleId" property'] = favoriteRelationship[0].hasOwnProperty('articlesArticleIdResponse');
				tests['favoriteRelationship[0] has "userId" property'] = favoriteRelationship[0].hasOwnProperty('usersUserIdResponse');
			}                 
	      }
      }
    });sleep(delay);
    
});    
group("follow_relationship", function() {

	postman[Request]({
      name: "Create users for create follow_relationship",
      id: "2023-12-07-16-03-00-000941",
      method: "POST",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/users",
      data:
        '{"users":{"bio":"bio","email":"email","id":"{{UNIQUE}}","image":"image","password":"password","username":"username"}}',
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      pre() {
        //console.log('Running beforeTest script...');
        // Pre-request Script
        const uniqueID = uuidv4();
        pm.globals.set("UNIQUE", uniqueID);
        //console.log(formattedDate);
      },
      post(response) {
	    //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        //console.log(pm.globals.get("UNIQUE"));
        var is201Response = responseCode.code === 201;

        tests["Response code is 201 OK - Create users for create follow_relationship"] = is201Response;

        if (!environment.isIntegrationTest && is201Response) {
          var responseJSON = JSON.parse(responseBody);

          tests[
            'Response contains "users" property'
          ] = responseJSON.hasOwnProperty("users");

          var users = responseJSON.users || {};
		  tests['users has "bio" property'] = users.hasOwnProperty("bio"); 
				
		  tests['users has "email" property'] = users.hasOwnProperty("email"); 
				
		  tests['users has "id" property'] = users.hasOwnProperty("id"); 
				
	      if(tests['users has "id" property']){
          		pm.globals.set('follow_relationship.users', users.id);
          }
           
          tests['Global variable "follow_relationship.users" has been set'] = pm.globals.get('follow_relationship.users') === users.id;
				      
		  if(tests['users has "id" property']){
                pm.globals.set('users.id', users.id);
          }
          
          tests['Global variable "users.id" has been set'] = pm.globals.get('users.id') === users.id;
		  tests['users has "image" property'] = users.hasOwnProperty("image"); 
				
		  tests['users has "password" property'] = users.hasOwnProperty("password"); 
				
		  tests['users has "username" property'] = users.hasOwnProperty("username"); 
				
        }
       }
      });sleep(delay);
        	

	postman[Request]({
      name: "Create users for create follow_relationship",
      id: "2023-12-07-16-03-00-000941",
      method: "POST",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/users",
      data:
        '{"users":{"bio":"bio","email":"email","id":"{{UNIQUE}}","image":"image","password":"password","username":"username"}}',
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      pre() {
        //console.log('Running beforeTest script...');
        // Pre-request Script
        const uniqueID = uuidv4();
        pm.globals.set("UNIQUE", uniqueID);
        //console.log(formattedDate);
      },
      post(response) {
	    //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        //console.log(pm.globals.get("UNIQUE"));
        var is201Response = responseCode.code === 201;

        tests["Response code is 201 OK - Create users for create follow_relationship"] = is201Response;

        if (!environment.isIntegrationTest && is201Response) {
          var responseJSON = JSON.parse(responseBody);

          tests[
            'Response contains "users" property'
          ] = responseJSON.hasOwnProperty("users");

          var users = responseJSON.users || {};
		  tests['users has "bio" property'] = users.hasOwnProperty("bio"); 
				
		  tests['users has "email" property'] = users.hasOwnProperty("email"); 
				
		  tests['users has "id" property'] = users.hasOwnProperty("id"); 
				
	      if(tests['users has "id" property']){
          		pm.globals.set('follow_relationship.users', users.id);
          }
           
          tests['Global variable "follow_relationship.users" has been set'] = pm.globals.get('follow_relationship.users') === users.id;
				      
		  if(tests['users has "id" property']){
                pm.globals.set('users.id', users.id);
          }
          
          tests['Global variable "users.id" has been set'] = pm.globals.get('users.id') === users.id;
		  tests['users has "image" property'] = users.hasOwnProperty("image"); 
				
		  tests['users has "password" property'] = users.hasOwnProperty("password"); 
				
		  tests['users has "username" property'] = users.hasOwnProperty("username"); 
				
        }
       }
      });sleep(delay);
        	

	postman[Request]({
      name: "Create follow_relationship for create follow_relationship",
      id: "2023-12-07-16-03-00-000941",
      method: "POST",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/followRelationship",
      data:
        '{"followRelationship":{"followedId":"{{follow_relationship.users}}","userId":"{{follow_relationship.users}}"}}',
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      pre() {
        //console.log('Running beforeTest script...');
        // Pre-request Script
        const uniqueID = uuidv4();
        pm.globals.set("UNIQUE", uniqueID);
        //console.log(formattedDate);
      },
      post(response) {
	    //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        //console.log(pm.globals.get("UNIQUE"));
        var is201Response = responseCode.code === 201;

        tests["Response code is 201 OK - Create follow_relationship for create follow_relationship"] = is201Response;

        if (!environment.isIntegrationTest && is201Response) {
          var responseJSON = JSON.parse(responseBody);

          tests[
            'Response contains "followRelationship" property'
          ] = responseJSON.hasOwnProperty("followRelationship");

          var followRelationship = responseJSON.followRelationship || {};
		  tests['followRelationship has "followedId" property'] = followRelationship.hasOwnProperty('usersFollowedIdResponse');
		  
		  if(tests['followRelationship has "followedId" property']){
                pm.globals.set('followRelationship.followedId', followRelationship.usersFollowedIdResponse.id);
           }
                  
          tests['Global variable "followRelationship.followedId" has been set'] = pm.globals.get('followRelationship.followedId') === followRelationship.usersFollowedIdResponse.id;
		  tests['followRelationship has "userId" property'] = followRelationship.hasOwnProperty('usersUserIdResponse');
		  
		  if(tests['followRelationship has "userId" property']){
                pm.globals.set('followRelationship.userId', followRelationship.usersUserIdResponse.id);
           }
                  
          tests['Global variable "followRelationship.userId" has been set'] = pm.globals.get('followRelationship.userId') === followRelationship.usersUserIdResponse.id;
        }
       }
      });sleep(delay);
        	
	
	postman[Request]({
      name: "Find followRelationship By Primary Key",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/followRelationship/find?followedId={{followRelationship.followedId}}&userId={{followRelationship.userId}}",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Response code is 200 OK - Find followRelationship By Primary Key'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	                 
	        tests['Response contains "followRelationship" property'] = responseJSON.hasOwnProperty('followRelationship');
	        
	        var followRelationship = responseJSON.followRelationship || {};
	       
			tests['followRelationship has "followedId" property'] = followRelationship.hasOwnProperty('usersFollowedIdResponse');
				
		    if(tests['followRelationship has "followedId" property']){
            	pm.globals.set('followRelationship.followedId', followRelationship.usersFollowedIdResponse.id);
            }
            
            tests['Global variable "followRelationship.followedId" has been set'] = pm.globals.get('followRelationship.followedId') === followRelationship.usersFollowedIdResponse.id;
			
			tests['followRelationship has "userId" property'] = followRelationship.hasOwnProperty('usersUserIdResponse');
				
		    if(tests['followRelationship has "userId" property']){
            	pm.globals.set('followRelationship.userId', followRelationship.usersUserIdResponse.id);
            }
            
            tests['Global variable "followRelationship.userId" has been set'] = pm.globals.get('followRelationship.userId') === followRelationship.usersUserIdResponse.id;
			
	    }
      }
    });sleep(delay);
    
    
    postman[Request]({
      name:
        "Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Desc",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/followRelationship?offset=0&limit=10&filter=followedId%7Ceq%7C{{followRelationship.followedId}}%7C%7CuserId%7Ceq%7C{{followRelationship.userId}}&conjunctions=OR,OR&sort=-followedId,-userId",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Desc - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "followRelationship" property'] = responseJSON.hasOwnProperty('followRelationship');
	           
	        tests['Response contains "followRelationshipCount" property'] = responseJSON.hasOwnProperty('followRelationshipCount');
	                 
	        var followRelationship = responseJSON.followRelationship || {};
	        if (typeof followRelationship === 'object' && Array.isArray(followRelationship) && followRelationship.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(followRelationship, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'followRelationship' has the same length as the response array length
			  	check(followRelationship, {
			    '	Response array length should match': (arr) => arr.length === followRelationship.length,
			  	});
	                   
				tests['followRelationship[0] has "followedId" property'] = followRelationship[0].hasOwnProperty('usersFollowedIdResponse');
				tests['followRelationship[0] has "userId" property'] = followRelationship[0].hasOwnProperty('usersUserIdResponse');
			}             
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Asc",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/followRelationship?offset=0&limit=10&filter=followedId%7Ceq%7C{{followRelationship.followedId}}%7C%7CuserId%7Ceq%7C{{followRelationship.userId}}&conjunctions=OR,OR&sort=followedId,userId",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Asc - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "followRelationship" property'] = responseJSON.hasOwnProperty('followRelationship');
	           
	        tests['Response contains "followRelationshipCount" property'] = responseJSON.hasOwnProperty('followRelationshipCount');
	                 
	        var followRelationship = responseJSON.followRelationship || {};
	        if (typeof followRelationship === 'object' && Array.isArray(followRelationship) && followRelationship.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(followRelationship, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'followRelationship' has the same length as the response array length
			  	check(followRelationship, {
			    '	Response array length should match': (arr) => arr.length === followRelationship.length,
			  	});
	                   
				tests['followRelationship[0] has "followedId" property'] = followRelationship[0].hasOwnProperty('usersFollowedIdResponse');
				tests['followRelationship[0] has "userId" property'] = followRelationship[0].hasOwnProperty('usersUserIdResponse');
			}                  
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Equals, Or Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/followRelationship?offset=0&limit=10&filter=followedId%7Ceq%7C{{followRelationship.followedId}}%7C%7CuserId%7Ceq%7C{{followRelationship.userId}}&conjunctions=OR,OR",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Equals, Or Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "followRelationship" property'] = responseJSON.hasOwnProperty('followRelationship');
	           
	        tests['Response contains "followRelationshipCount" property'] = responseJSON.hasOwnProperty('followRelationshipCount');
	                 
	        var followRelationship = responseJSON.followRelationship || {};
	        if (typeof followRelationship === 'object' && Array.isArray(followRelationship) && followRelationship.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(followRelationship, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'followRelationship' has the same length as the response array length
			  	check(followRelationship, {
			    '	Response array length should match': (arr) => arr.length === followRelationship.length,
			  	});
	                   
				tests['followRelationship[0] has "followedId" property'] = followRelationship[0].hasOwnProperty('usersFollowedIdResponse');
				tests['followRelationship[0] has "userId" property'] = followRelationship[0].hasOwnProperty('usersUserIdResponse');
			}             
	      }
      }
    });sleep(delay);
    
    
    postman[Request]({
      name:
        "Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Equals, And Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/followRelationship?offset=0&limit=10&filter=followedId%7Ceq%7C{{followRelationship.followedId}}%7C%7CuserId%7Ceq%7C{{followRelationship.userId}}&conjunctions=AND,AND",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Equals, And Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "followRelationship" property'] = responseJSON.hasOwnProperty('followRelationship');
	           
	        tests['Response contains "followRelationshipCount" property'] = responseJSON.hasOwnProperty('followRelationshipCount');
	                 
	        var followRelationship = responseJSON.followRelationship || {};
	        if (typeof followRelationship === 'object' && Array.isArray(followRelationship) && followRelationship.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(followRelationship, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'followRelationship' has the same length as the response array length
			  	check(followRelationship, {
			    '	Response array length should match': (arr) => arr.length === followRelationship.length,
			  	});
	                   
				tests['followRelationship[0] has "followedId" property'] = followRelationship[0].hasOwnProperty('usersFollowedIdResponse');
				tests['followRelationship[0] has "userId" property'] = followRelationship[0].hasOwnProperty('usersUserIdResponse');
			}                 
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Not Equals, Or Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/followRelationship?offset=0&limit=10&filter=followedId%7Cneq%7C{{followRelationship.followedId}}%7C%7CuserId%7Cneq%7C{{followRelationship.userId}}&conjunctions=OR,OR",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Not Equals, Or Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "followRelationship" property'] = responseJSON.hasOwnProperty('followRelationship');
	           
	        tests['Response contains "followRelationshipCount" property'] = responseJSON.hasOwnProperty('followRelationshipCount');
	                 
	        var followRelationship = responseJSON.followRelationship || {};
            
            if (typeof followRelationship === 'object' && Array.isArray(followRelationship) && followRelationship.length > 0) {
			    // Check if 'articles' is an array and has length above 0
			  	check(followRelationship, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'followRelationship' has the same length as the response array length
			  	check(followRelationship, {
			    '	Response array length should match': (arr) => arr.length === followRelationship.length,
			  	});
	                   
				tests['followRelationship[0] has "followedId" property'] = followRelationship[0].hasOwnProperty('usersFollowedIdResponse');
				tests['followRelationship[0] has "userId" property'] = followRelationship[0].hasOwnProperty('usersUserIdResponse');
			}                 
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Like, And Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/followRelationship?offset=0&limit=10&filter=followedId%7Clike%7C{{followRelationship.followedId}}%7C%7CuserId%7Clike%7C{{followRelationship.userId}}&conjunctions=AND,AND",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Like, And Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "followRelationship" property'] = responseJSON.hasOwnProperty('followRelationship');
	           
	        tests['Response contains "followRelationshipCount" property'] = responseJSON.hasOwnProperty('followRelationshipCount');
	                 
	        var followRelationship = responseJSON.followRelationship || {};
	        if (typeof followRelationship === 'object' && Array.isArray(followRelationship) && followRelationship.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(followRelationship, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'followRelationship' has the same length as the response array length
			  	check(followRelationship, {
			    '	Response array length should match': (arr) => arr.length === followRelationship.length,
			  	});
	                   
				tests['followRelationship[0] has "followedId" property'] = followRelationship[0].hasOwnProperty('usersFollowedIdResponse');
				tests['followRelationship[0] has "userId" property'] = followRelationship[0].hasOwnProperty('usersUserIdResponse');
			}                
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Not Like, Or Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/followRelationship?offset=0&limit=10&filter=followedId%7Cnlike%7C{{followRelationship.followedId}}%7C%7CuserId%7Cnlike%7C{{followRelationship.userId}}&conjunctions=OR,OR",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find follow_relationship By Filter With Offset0 And Limit10, All Fields, Not Like, Or Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "followRelationship" property'] = responseJSON.hasOwnProperty('followRelationship');
	           
	        tests['Response contains "followRelationshipCount" property'] = responseJSON.hasOwnProperty('followRelationshipCount');
	                 
	        var followRelationship = responseJSON.followRelationship || {};

			if (typeof followRelationship === 'object' && Array.isArray(followRelationship) && followRelationship.length > 0) {
			    // Check if 'articles' is an array and has length above 0
			  	check(followRelationship, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'followRelationship' has the same length as the response array length
			  	check(followRelationship, {
			    '	Response array length should match': (arr) => arr.length === followRelationship.length,
			  	});
	                   
				tests['followRelationship[0] has "followedId" property'] = followRelationship[0].hasOwnProperty('usersFollowedIdResponse');
				tests['followRelationship[0] has "userId" property'] = followRelationship[0].hasOwnProperty('usersUserIdResponse');
			}                 
	      }
      }
    });sleep(delay);
    
});    
group("tag_relationship", function() {

	postman[Request]({
      name: "Create users for create articles",
      id: "2023-12-07-16-03-00-000941",
      method: "POST",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/users",
      data:
        '{"users":{"bio":"bio","email":"email","id":"{{UNIQUE}}","image":"image","password":"password","username":"username"}}',
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      pre() {
        //console.log('Running beforeTest script...');
        // Pre-request Script
        const uniqueID = uuidv4();
        pm.globals.set("UNIQUE", uniqueID);
        //console.log(formattedDate);
      },
      post(response) {
	    //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        //console.log(pm.globals.get("UNIQUE"));
        var is201Response = responseCode.code === 201;

        tests["Response code is 201 OK - Create users for create articles"] = is201Response;

        if (!environment.isIntegrationTest && is201Response) {
          var responseJSON = JSON.parse(responseBody);

          tests[
            'Response contains "users" property'
          ] = responseJSON.hasOwnProperty("users");

          var users = responseJSON.users || {};
		  tests['users has "bio" property'] = users.hasOwnProperty("bio"); 
				
		  tests['users has "email" property'] = users.hasOwnProperty("email"); 
				
		  tests['users has "id" property'] = users.hasOwnProperty("id"); 
				
	      if(tests['users has "id" property']){
          		pm.globals.set('articles.users', users.id);
          }
           
          tests['Global variable "articles.users" has been set'] = pm.globals.get('articles.users') === users.id;
				      
		  if(tests['users has "id" property']){
                pm.globals.set('users.id', users.id);
          }
          
          tests['Global variable "users.id" has been set'] = pm.globals.get('users.id') === users.id;
		  tests['users has "image" property'] = users.hasOwnProperty("image"); 
				
		  tests['users has "password" property'] = users.hasOwnProperty("password"); 
				
		  tests['users has "username" property'] = users.hasOwnProperty("username"); 
				
        }
       }
      });sleep(delay);
        	

	postman[Request]({
      name: "Create articles for create tag_relationship",
      id: "2023-12-07-16-03-00-000941",
      method: "POST",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/articles",
      data:
        '{"articles":{"createdat":"{{LocalDateTimeNow}}","updatedat":"{{LocalDateTimeNow}}","authorId":"{{articles.users}}","body":"body","description":"description","id":"{{UNIQUE}}","slug":"slug","title":"title"}}',
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      pre() {
        //console.log('Running beforeTest script...');
        // Pre-request Script
        const uniqueID = uuidv4();
        pm.globals.set("UNIQUE", uniqueID);
        //console.log(formattedDate);
      },
      post(response) {
	    //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        //console.log(pm.globals.get("UNIQUE"));
        var is201Response = responseCode.code === 201;

        tests["Response code is 201 OK - Create articles for create tag_relationship"] = is201Response;

        if (!environment.isIntegrationTest && is201Response) {
          var responseJSON = JSON.parse(responseBody);

          tests[
            'Response contains "articles" property'
          ] = responseJSON.hasOwnProperty("articles");

          var articles = responseJSON.articles || {};
		  tests['articles has "createdat" property'] = articles.hasOwnProperty("createdat"); 
		  tests['articles of "createdat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(articles.createdat);
				
		  tests['articles has "updatedat" property'] = articles.hasOwnProperty("updatedat"); 
		  tests['articles of "updatedat" property is an ISO 8601 timestamp'] = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$/.test(articles.updatedat);
				
		  tests['articles has "authorId" property'] = articles.hasOwnProperty('usersAuthorIdResponse');
		  tests['articles has "body" property'] = articles.hasOwnProperty("body"); 
				
		  tests['articles has "description" property'] = articles.hasOwnProperty("description"); 
				
		  tests['articles has "id" property'] = articles.hasOwnProperty("id"); 
				
	      if(tests['articles has "id" property']){
          		pm.globals.set('tag_relationship.articles', articles.id);
          }
           
          tests['Global variable "tag_relationship.articles" has been set'] = pm.globals.get('tag_relationship.articles') === articles.id;
				      
		  if(tests['articles has "id" property']){
                pm.globals.set('articles.id', articles.id);
          }
          
          tests['Global variable "articles.id" has been set'] = pm.globals.get('articles.id') === articles.id;
		  tests['articles has "slug" property'] = articles.hasOwnProperty("slug"); 
				
		  tests['articles has "title" property'] = articles.hasOwnProperty("title"); 
				
        }
       }
      });sleep(delay);
        	

	postman[Request]({
      name: "Create tags for create tag_relationship",
      id: "2023-12-07-16-03-00-000941",
      method: "POST",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/tags",
      data:
        '{"tags":{"id":"{{UNIQUE}}","name":"name"}}',
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      pre() {
        //console.log('Running beforeTest script...');
        // Pre-request Script
        const uniqueID = uuidv4();
        pm.globals.set("UNIQUE", uniqueID);
        //console.log(formattedDate);
      },
      post(response) {
	    //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        //console.log(pm.globals.get("UNIQUE"));
        var is201Response = responseCode.code === 201;

        tests["Response code is 201 OK - Create tags for create tag_relationship"] = is201Response;

        if (!environment.isIntegrationTest && is201Response) {
          var responseJSON = JSON.parse(responseBody);

          tests[
            'Response contains "tags" property'
          ] = responseJSON.hasOwnProperty("tags");

          var tags = responseJSON.tags || {};
		  tests['tags has "id" property'] = tags.hasOwnProperty("id"); 
				
	      if(tests['tags has "id" property']){
          		pm.globals.set('tag_relationship.tags', tags.id);
          }
           
          tests['Global variable "tag_relationship.tags" has been set'] = pm.globals.get('tag_relationship.tags') === tags.id;
				      
		  if(tests['tags has "id" property']){
                pm.globals.set('tags.id', tags.id);
          }
          
          tests['Global variable "tags.id" has been set'] = pm.globals.get('tags.id') === tags.id;
		  tests['tags has "name" property'] = tags.hasOwnProperty("name"); 
				
        }
       }
      });sleep(delay);
        	

	postman[Request]({
      name: "Create tag_relationship for create tag_relationship",
      id: "2023-12-07-16-03-00-000941",
      method: "POST",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/tagRelationship",
      data:
        '{"tagRelationship":{"articleId":"{{tag_relationship.articles}}","tagId":"{{tag_relationship.tags}}"}}',
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      pre() {
        //console.log('Running beforeTest script...');
        // Pre-request Script
        const uniqueID = uuidv4();
        pm.globals.set("UNIQUE", uniqueID);
        //console.log(formattedDate);
      },
      post(response) {
	    //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        //console.log(pm.globals.get("UNIQUE"));
        var is201Response = responseCode.code === 201;

        tests["Response code is 201 OK - Create tag_relationship for create tag_relationship"] = is201Response;

        if (!environment.isIntegrationTest && is201Response) {
          var responseJSON = JSON.parse(responseBody);

          tests[
            'Response contains "tagRelationship" property'
          ] = responseJSON.hasOwnProperty("tagRelationship");

          var tagRelationship = responseJSON.tagRelationship || {};
		  tests['tagRelationship has "articleId" property'] = tagRelationship.hasOwnProperty('articlesArticleIdResponse');
		  
		  if(tests['tagRelationship has "articleId" property']){
                pm.globals.set('tagRelationship.articleId', tagRelationship.articlesArticleIdResponse.id);
           }
                  
          tests['Global variable "tagRelationship.articleId" has been set'] = pm.globals.get('tagRelationship.articleId') === tagRelationship.articlesArticleIdResponse.id;
		  tests['tagRelationship has "tagId" property'] = tagRelationship.hasOwnProperty('tagsTagIdResponse');
		  
		  if(tests['tagRelationship has "tagId" property']){
                pm.globals.set('tagRelationship.tagId', tagRelationship.tagsTagIdResponse.id);
           }
                  
          tests['Global variable "tagRelationship.tagId" has been set'] = pm.globals.get('tagRelationship.tagId') === tagRelationship.tagsTagIdResponse.id;
        }
       }
      });sleep(delay);
        	
	
	postman[Request]({
      name: "Find tagRelationship By Primary Key",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/tagRelationship/find?articleId={{tagRelationship.articleId}}&tagId={{tagRelationship.tagId}}",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Response code is 200 OK - Find tagRelationship By Primary Key'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	                 
	        tests['Response contains "tagRelationship" property'] = responseJSON.hasOwnProperty('tagRelationship');
	        
	        var tagRelationship = responseJSON.tagRelationship || {};
	       
			tests['tagRelationship has "articleId" property'] = tagRelationship.hasOwnProperty('articlesArticleIdResponse');
				
		    if(tests['tagRelationship has "articleId" property']){
            	pm.globals.set('tagRelationship.articleId', tagRelationship.articlesArticleIdResponse.id);
            }
            
            tests['Global variable "tagRelationship.articleId" has been set'] = pm.globals.get('tagRelationship.articleId') === tagRelationship.articlesArticleIdResponse.id;
			
			tests['tagRelationship has "tagId" property'] = tagRelationship.hasOwnProperty('tagsTagIdResponse');
				
		    if(tests['tagRelationship has "tagId" property']){
            	pm.globals.set('tagRelationship.tagId', tagRelationship.tagsTagIdResponse.id);
            }
            
            tests['Global variable "tagRelationship.tagId" has been set'] = pm.globals.get('tagRelationship.tagId') === tagRelationship.tagsTagIdResponse.id;
			
	    }
      }
    });sleep(delay);
    
    
    postman[Request]({
      name:
        "Find tag_relationship By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Desc",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/tagRelationship?offset=0&limit=10&filter=articleId%7Ceq%7C{{tagRelationship.articleId}}%7C%7CtagId%7Ceq%7C{{tagRelationship.tagId}}&conjunctions=OR,OR&sort=-articleId,-tagId",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find tag_relationship By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Desc - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "tagRelationship" property'] = responseJSON.hasOwnProperty('tagRelationship');
	           
	        tests['Response contains "tagRelationshipCount" property'] = responseJSON.hasOwnProperty('tagRelationshipCount');
	                 
	        var tagRelationship = responseJSON.tagRelationship || {};
	        if (typeof tagRelationship === 'object' && Array.isArray(tagRelationship) && tagRelationship.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(tagRelationship, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'tagRelationship' has the same length as the response array length
			  	check(tagRelationship, {
			    '	Response array length should match': (arr) => arr.length === tagRelationship.length,
			  	});
	                   
				tests['tagRelationship[0] has "articleId" property'] = tagRelationship[0].hasOwnProperty('articlesArticleIdResponse');
				tests['tagRelationship[0] has "tagId" property'] = tagRelationship[0].hasOwnProperty('tagsTagIdResponse');
			}             
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find tag_relationship By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Asc",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/tagRelationship?offset=0&limit=10&filter=articleId%7Ceq%7C{{tagRelationship.articleId}}%7C%7CtagId%7Ceq%7C{{tagRelationship.tagId}}&conjunctions=OR,OR&sort=articleId,tagId",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find tag_relationship By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Asc - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "tagRelationship" property'] = responseJSON.hasOwnProperty('tagRelationship');
	           
	        tests['Response contains "tagRelationshipCount" property'] = responseJSON.hasOwnProperty('tagRelationshipCount');
	                 
	        var tagRelationship = responseJSON.tagRelationship || {};
	        if (typeof tagRelationship === 'object' && Array.isArray(tagRelationship) && tagRelationship.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(tagRelationship, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'tagRelationship' has the same length as the response array length
			  	check(tagRelationship, {
			    '	Response array length should match': (arr) => arr.length === tagRelationship.length,
			  	});
	                   
				tests['tagRelationship[0] has "articleId" property'] = tagRelationship[0].hasOwnProperty('articlesArticleIdResponse');
				tests['tagRelationship[0] has "tagId" property'] = tagRelationship[0].hasOwnProperty('tagsTagIdResponse');
			}                  
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find tag_relationship By Filter With Offset0 And Limit10, All Fields, Equals, Or Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/tagRelationship?offset=0&limit=10&filter=articleId%7Ceq%7C{{tagRelationship.articleId}}%7C%7CtagId%7Ceq%7C{{tagRelationship.tagId}}&conjunctions=OR,OR",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find tag_relationship By Filter With Offset0 And Limit10, All Fields, Equals, Or Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "tagRelationship" property'] = responseJSON.hasOwnProperty('tagRelationship');
	           
	        tests['Response contains "tagRelationshipCount" property'] = responseJSON.hasOwnProperty('tagRelationshipCount');
	                 
	        var tagRelationship = responseJSON.tagRelationship || {};
	        if (typeof tagRelationship === 'object' && Array.isArray(tagRelationship) && tagRelationship.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(tagRelationship, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'tagRelationship' has the same length as the response array length
			  	check(tagRelationship, {
			    '	Response array length should match': (arr) => arr.length === tagRelationship.length,
			  	});
	                   
				tests['tagRelationship[0] has "articleId" property'] = tagRelationship[0].hasOwnProperty('articlesArticleIdResponse');
				tests['tagRelationship[0] has "tagId" property'] = tagRelationship[0].hasOwnProperty('tagsTagIdResponse');
			}             
	      }
      }
    });sleep(delay);
    
    
    postman[Request]({
      name:
        "Find tag_relationship By Filter With Offset0 And Limit10, All Fields, Equals, And Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/tagRelationship?offset=0&limit=10&filter=articleId%7Ceq%7C{{tagRelationship.articleId}}%7C%7CtagId%7Ceq%7C{{tagRelationship.tagId}}&conjunctions=AND,AND",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find tag_relationship By Filter With Offset0 And Limit10, All Fields, Equals, And Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "tagRelationship" property'] = responseJSON.hasOwnProperty('tagRelationship');
	           
	        tests['Response contains "tagRelationshipCount" property'] = responseJSON.hasOwnProperty('tagRelationshipCount');
	                 
	        var tagRelationship = responseJSON.tagRelationship || {};
	        if (typeof tagRelationship === 'object' && Array.isArray(tagRelationship) && tagRelationship.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(tagRelationship, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'tagRelationship' has the same length as the response array length
			  	check(tagRelationship, {
			    '	Response array length should match': (arr) => arr.length === tagRelationship.length,
			  	});
	                   
				tests['tagRelationship[0] has "articleId" property'] = tagRelationship[0].hasOwnProperty('articlesArticleIdResponse');
				tests['tagRelationship[0] has "tagId" property'] = tagRelationship[0].hasOwnProperty('tagsTagIdResponse');
			}                 
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find tag_relationship By Filter With Offset0 And Limit10, All Fields, Not Equals, Or Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/tagRelationship?offset=0&limit=10&filter=articleId%7Cneq%7C{{tagRelationship.articleId}}%7C%7CtagId%7Cneq%7C{{tagRelationship.tagId}}&conjunctions=OR,OR",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find tag_relationship By Filter With Offset0 And Limit10, All Fields, Not Equals, Or Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "tagRelationship" property'] = responseJSON.hasOwnProperty('tagRelationship');
	           
	        tests['Response contains "tagRelationshipCount" property'] = responseJSON.hasOwnProperty('tagRelationshipCount');
	                 
	        var tagRelationship = responseJSON.tagRelationship || {};
            
            if (typeof tagRelationship === 'object' && Array.isArray(tagRelationship) && tagRelationship.length > 0) {
			    // Check if 'articles' is an array and has length above 0
			  	check(tagRelationship, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'tagRelationship' has the same length as the response array length
			  	check(tagRelationship, {
			    '	Response array length should match': (arr) => arr.length === tagRelationship.length,
			  	});
	                   
				tests['tagRelationship[0] has "articleId" property'] = tagRelationship[0].hasOwnProperty('articlesArticleIdResponse');
				tests['tagRelationship[0] has "tagId" property'] = tagRelationship[0].hasOwnProperty('tagsTagIdResponse');
			}                 
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find tag_relationship By Filter With Offset0 And Limit10, All Fields, Like, And Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/tagRelationship?offset=0&limit=10&filter=articleId%7Clike%7C{{tagRelationship.articleId}}%7C%7CtagId%7Clike%7C{{tagRelationship.tagId}}&conjunctions=AND,AND",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find tag_relationship By Filter With Offset0 And Limit10, All Fields, Like, And Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "tagRelationship" property'] = responseJSON.hasOwnProperty('tagRelationship');
	           
	        tests['Response contains "tagRelationshipCount" property'] = responseJSON.hasOwnProperty('tagRelationshipCount');
	                 
	        var tagRelationship = responseJSON.tagRelationship || {};
	        if (typeof tagRelationship === 'object' && Array.isArray(tagRelationship) && tagRelationship.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(tagRelationship, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'tagRelationship' has the same length as the response array length
			  	check(tagRelationship, {
			    '	Response array length should match': (arr) => arr.length === tagRelationship.length,
			  	});
	                   
				tests['tagRelationship[0] has "articleId" property'] = tagRelationship[0].hasOwnProperty('articlesArticleIdResponse');
				tests['tagRelationship[0] has "tagId" property'] = tagRelationship[0].hasOwnProperty('tagsTagIdResponse');
			}                
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find tag_relationship By Filter With Offset0 And Limit10, All Fields, Not Like, Or Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/tagRelationship?offset=0&limit=10&filter=articleId%7Cnlike%7C{{tagRelationship.articleId}}%7C%7CtagId%7Cnlike%7C{{tagRelationship.tagId}}&conjunctions=OR,OR",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find tag_relationship By Filter With Offset0 And Limit10, All Fields, Not Like, Or Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "tagRelationship" property'] = responseJSON.hasOwnProperty('tagRelationship');
	           
	        tests['Response contains "tagRelationshipCount" property'] = responseJSON.hasOwnProperty('tagRelationshipCount');
	                 
	        var tagRelationship = responseJSON.tagRelationship || {};

			if (typeof tagRelationship === 'object' && Array.isArray(tagRelationship) && tagRelationship.length > 0) {
			    // Check if 'articles' is an array and has length above 0
			  	check(tagRelationship, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'tagRelationship' has the same length as the response array length
			  	check(tagRelationship, {
			    '	Response array length should match': (arr) => arr.length === tagRelationship.length,
			  	});
	                   
				tests['tagRelationship[0] has "articleId" property'] = tagRelationship[0].hasOwnProperty('articlesArticleIdResponse');
				tests['tagRelationship[0] has "tagId" property'] = tagRelationship[0].hasOwnProperty('tagsTagIdResponse');
			}                 
	      }
      }
    });sleep(delay);
    
});    
group("tags", function() {

	postman[Request]({
      name: "Create tags for create tags",
      id: "2023-12-07-16-03-00-000941",
      method: "POST",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/tags",
      data:
        '{"tags":{"id":"{{UNIQUE}}","name":"name"}}',
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      pre() {
        //console.log('Running beforeTest script...');
        // Pre-request Script
        const uniqueID = uuidv4();
        pm.globals.set("UNIQUE", uniqueID);
        //console.log(formattedDate);
      },
      post(response) {
	    //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        //console.log(pm.globals.get("UNIQUE"));
        var is201Response = responseCode.code === 201;

        tests["Response code is 201 OK - Create tags for create tags"] = is201Response;

        if (!environment.isIntegrationTest && is201Response) {
          var responseJSON = JSON.parse(responseBody);

          tests[
            'Response contains "tags" property'
          ] = responseJSON.hasOwnProperty("tags");

          var tags = responseJSON.tags || {};
		  tests['tags has "id" property'] = tags.hasOwnProperty("id"); 
				
	      if(tests['tags has "id" property']){
          		pm.globals.set('tags.tags', tags.id);
          }
           
          tests['Global variable "tags.tags" has been set'] = pm.globals.get('tags.tags') === tags.id;
				      
		  if(tests['tags has "id" property']){
                pm.globals.set('tags.id', tags.id);
          }
          
          tests['Global variable "tags.id" has been set'] = pm.globals.get('tags.id') === tags.id;
		  tests['tags has "name" property'] = tags.hasOwnProperty("name"); 
				
        }
       }
      });sleep(delay);
        	
	
	postman[Request]({
      name: "Find tags By Primary Key",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/tags/find?id={{tags.id}}",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Response code is 200 OK - Find tags By Primary Key'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	                 
	        tests['Response contains "tags" property'] = responseJSON.hasOwnProperty('tags');
	        
	        var tags = responseJSON.tags || {};
	       
			tests['tags has "id" property'] = tags.hasOwnProperty('id'); 
		
		    if(tests['tags has "id" property']){
            	pm.globals.set('tags.id', tags.id);
            }
            
            tests['Global variable "tags.id" has been set'] = pm.globals.get('tags.id') === tags.id;
		
			tests['tags has "name" property'] = tags.hasOwnProperty('name'); 
		
		    if(tests['tags has "name" property']){
            	pm.globals.set('tags.name', tags.name);
            }
            
            tests['Global variable "tags.name" has been set'] = pm.globals.get('tags.name') === tags.name;
		
	    }
      }
    });sleep(delay);
    
    
    postman[Request]({
      name:
        "Find tags By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Desc",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/tags?offset=0&limit=10&filter=id%7Ceq%7C{{tags.id}}%7C%7Cname%7Ceq%7C{{tags.name}}&conjunctions=OR,OR&sort=-id,-name",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find tags By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Desc - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "tags" property'] = responseJSON.hasOwnProperty('tags');
	           
	        tests['Response contains "tagsCount" property'] = responseJSON.hasOwnProperty('tagsCount');
	                 
	        var tags = responseJSON.tags || {};
	        if (typeof tags === 'object' && Array.isArray(tags) && tags.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(tags, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'tags' has the same length as the response array length
			  	check(tags, {
			    '	Response array length should match': (arr) => arr.length === tags.length,
			  	});
	                   
				tests['tags[0] has "id" property'] = tags[0].hasOwnProperty('id');
					  
				tests['tags[0] has "name" property'] = tags[0].hasOwnProperty('name');
					  
			}             
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find tags By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Asc",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/tags?offset=0&limit=10&filter=id%7Ceq%7C{{tags.id}}%7C%7Cname%7Ceq%7C{{tags.name}}&conjunctions=OR,OR&sort=id,name",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find tags By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Asc - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "tags" property'] = responseJSON.hasOwnProperty('tags');
	           
	        tests['Response contains "tagsCount" property'] = responseJSON.hasOwnProperty('tagsCount');
	                 
	        var tags = responseJSON.tags || {};
	        if (typeof tags === 'object' && Array.isArray(tags) && tags.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(tags, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'tags' has the same length as the response array length
			  	check(tags, {
			    '	Response array length should match': (arr) => arr.length === tags.length,
			  	});
	                   
				tests['tags[0] has "id" property'] = tags[0].hasOwnProperty('id');
					  
				tests['tags[0] has "name" property'] = tags[0].hasOwnProperty('name');
					  
			}                  
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find tags By Filter With Offset0 And Limit10, All Fields, Equals, Or Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/tags?offset=0&limit=10&filter=id%7Ceq%7C{{tags.id}}%7C%7Cname%7Ceq%7C{{tags.name}}&conjunctions=OR,OR",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find tags By Filter With Offset0 And Limit10, All Fields, Equals, Or Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "tags" property'] = responseJSON.hasOwnProperty('tags');
	           
	        tests['Response contains "tagsCount" property'] = responseJSON.hasOwnProperty('tagsCount');
	                 
	        var tags = responseJSON.tags || {};
	        if (typeof tags === 'object' && Array.isArray(tags) && tags.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(tags, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'tags' has the same length as the response array length
			  	check(tags, {
			    '	Response array length should match': (arr) => arr.length === tags.length,
			  	});
	                   
				tests['tags[0] has "id" property'] = tags[0].hasOwnProperty('id');
					  
				tests['tags[0] has "name" property'] = tags[0].hasOwnProperty('name');
					  
			}             
	      }
      }
    });sleep(delay);
    
    
    postman[Request]({
      name:
        "Find tags By Filter With Offset0 And Limit10, All Fields, Equals, And Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/tags?offset=0&limit=10&filter=id%7Ceq%7C{{tags.id}}%7C%7Cname%7Ceq%7C{{tags.name}}&conjunctions=AND,AND",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find tags By Filter With Offset0 And Limit10, All Fields, Equals, And Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "tags" property'] = responseJSON.hasOwnProperty('tags');
	           
	        tests['Response contains "tagsCount" property'] = responseJSON.hasOwnProperty('tagsCount');
	                 
	        var tags = responseJSON.tags || {};
	        if (typeof tags === 'object' && Array.isArray(tags) && tags.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(tags, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'tags' has the same length as the response array length
			  	check(tags, {
			    '	Response array length should match': (arr) => arr.length === tags.length,
			  	});
	                   
				tests['tags[0] has "id" property'] = tags[0].hasOwnProperty('id');
					  
				tests['tags[0] has "name" property'] = tags[0].hasOwnProperty('name');
					  
			}                 
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find tags By Filter With Offset0 And Limit10, All Fields, Not Equals, Or Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/tags?offset=0&limit=10&filter=id%7Cneq%7C{{tags.id}}%7C%7Cname%7Cneq%7C{{tags.name}}&conjunctions=OR,OR",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find tags By Filter With Offset0 And Limit10, All Fields, Not Equals, Or Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "tags" property'] = responseJSON.hasOwnProperty('tags');
	           
	        tests['Response contains "tagsCount" property'] = responseJSON.hasOwnProperty('tagsCount');
	                 
	        var tags = responseJSON.tags || {};
            
            if (typeof tags === 'object' && Array.isArray(tags) && tags.length > 0) {
			    // Check if 'articles' is an array and has length above 0
			  	check(tags, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'tags' has the same length as the response array length
			  	check(tags, {
			    '	Response array length should match': (arr) => arr.length === tags.length,
			  	});
	                   
				tests['tags[0] has "id" property'] = tags[0].hasOwnProperty('id');
					  
				tests['tags[0] has "name" property'] = tags[0].hasOwnProperty('name');
					  
			}                 
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find tags By Filter With Offset0 And Limit10, All Fields, Like, And Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/tags?offset=0&limit=10&filter=id%7Clike%7C{{tags.id}}%7C%7Cname%7Clike%7C{{tags.name}}&conjunctions=AND,AND",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find tags By Filter With Offset0 And Limit10, All Fields, Like, And Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "tags" property'] = responseJSON.hasOwnProperty('tags');
	           
	        tests['Response contains "tagsCount" property'] = responseJSON.hasOwnProperty('tagsCount');
	                 
	        var tags = responseJSON.tags || {};
	        if (typeof tags === 'object' && Array.isArray(tags) && tags.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(tags, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'tags' has the same length as the response array length
			  	check(tags, {
			    '	Response array length should match': (arr) => arr.length === tags.length,
			  	});
	                   
				tests['tags[0] has "id" property'] = tags[0].hasOwnProperty('id');
					  
				tests['tags[0] has "name" property'] = tags[0].hasOwnProperty('name');
					  
			}                
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find tags By Filter With Offset0 And Limit10, All Fields, Not Like, Or Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/tags?offset=0&limit=10&filter=id%7Cnlike%7C{{tags.id}}%7C%7Cname%7Cnlike%7C{{tags.name}}&conjunctions=OR,OR",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find tags By Filter With Offset0 And Limit10, All Fields, Not Like, Or Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "tags" property'] = responseJSON.hasOwnProperty('tags');
	           
	        tests['Response contains "tagsCount" property'] = responseJSON.hasOwnProperty('tagsCount');
	                 
	        var tags = responseJSON.tags || {};

			if (typeof tags === 'object' && Array.isArray(tags) && tags.length > 0) {
			    // Check if 'articles' is an array and has length above 0
			  	check(tags, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'tags' has the same length as the response array length
			  	check(tags, {
			    '	Response array length should match': (arr) => arr.length === tags.length,
			  	});
	                   
				tests['tags[0] has "id" property'] = tags[0].hasOwnProperty('id');
					  
				tests['tags[0] has "name" property'] = tags[0].hasOwnProperty('name');
					  
			}                 
	      }
      }
    });sleep(delay);
    
});    
group("users", function() {

	postman[Request]({
      name: "Create users for create users",
      id: "2023-12-07-16-03-00-000941",
      method: "POST",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/users",
      data:
        '{"users":{"bio":"bio","email":"email","id":"{{UNIQUE}}","image":"image","password":"password","username":"username"}}',
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      pre() {
        //console.log('Running beforeTest script...');
        // Pre-request Script
        const uniqueID = uuidv4();
        pm.globals.set("UNIQUE", uniqueID);
        //console.log(formattedDate);
      },
      post(response) {
	    //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        //console.log(pm.globals.get("UNIQUE"));
        var is201Response = responseCode.code === 201;

        tests["Response code is 201 OK - Create users for create users"] = is201Response;

        if (!environment.isIntegrationTest && is201Response) {
          var responseJSON = JSON.parse(responseBody);

          tests[
            'Response contains "users" property'
          ] = responseJSON.hasOwnProperty("users");

          var users = responseJSON.users || {};
		  tests['users has "bio" property'] = users.hasOwnProperty("bio"); 
				
		  tests['users has "email" property'] = users.hasOwnProperty("email"); 
				
		  tests['users has "id" property'] = users.hasOwnProperty("id"); 
				
	      if(tests['users has "id" property']){
          		pm.globals.set('users.users', users.id);
          }
           
          tests['Global variable "users.users" has been set'] = pm.globals.get('users.users') === users.id;
				      
		  if(tests['users has "id" property']){
                pm.globals.set('users.id', users.id);
          }
          
          tests['Global variable "users.id" has been set'] = pm.globals.get('users.id') === users.id;
		  tests['users has "image" property'] = users.hasOwnProperty("image"); 
				
		  tests['users has "password" property'] = users.hasOwnProperty("password"); 
				
		  tests['users has "username" property'] = users.hasOwnProperty("username"); 
				
        }
       }
      });sleep(delay);
        	
	
	postman[Request]({
      name: "Find users By Primary Key",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address: "{{APIURL}}/firmansyah/users/find?id={{users.id}}",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Response code is 200 OK - Find users By Primary Key'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	                 
	        tests['Response contains "users" property'] = responseJSON.hasOwnProperty('users');
	        
	        var users = responseJSON.users || {};
	       
			tests['users has "bio" property'] = users.hasOwnProperty('bio'); 
		
		    if(tests['users has "bio" property']){
            	pm.globals.set('users.bio', users.bio);
            }
            
            tests['Global variable "users.bio" has been set'] = pm.globals.get('users.bio') === users.bio;
		
			tests['users has "email" property'] = users.hasOwnProperty('email'); 
		
		    if(tests['users has "email" property']){
            	pm.globals.set('users.email', users.email);
            }
            
            tests['Global variable "users.email" has been set'] = pm.globals.get('users.email') === users.email;
		
			tests['users has "id" property'] = users.hasOwnProperty('id'); 
		
		    if(tests['users has "id" property']){
            	pm.globals.set('users.id', users.id);
            }
            
            tests['Global variable "users.id" has been set'] = pm.globals.get('users.id') === users.id;
		
			tests['users has "image" property'] = users.hasOwnProperty('image'); 
		
		    if(tests['users has "image" property']){
            	pm.globals.set('users.image', users.image);
            }
            
            tests['Global variable "users.image" has been set'] = pm.globals.get('users.image') === users.image;
		
			tests['users has "password" property'] = users.hasOwnProperty('password'); 
		
		    if(tests['users has "password" property']){
            	pm.globals.set('users.password', users.password);
            }
            
            tests['Global variable "users.password" has been set'] = pm.globals.get('users.password') === users.password;
		
			tests['users has "username" property'] = users.hasOwnProperty('username'); 
		
		    if(tests['users has "username" property']){
            	pm.globals.set('users.username', users.username);
            }
            
            tests['Global variable "users.username" has been set'] = pm.globals.get('users.username') === users.username;
		
	    }
      }
    });sleep(delay);
    
    
    postman[Request]({
      name:
        "Find users By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Desc",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/users?offset=0&limit=10&filter=bio%7Ceq%7C{{users.bio}}%7C%7Cemail%7Ceq%7C{{users.email}}%7C%7Cid%7Ceq%7C{{users.id}}%7C%7Cimage%7Ceq%7C{{users.image}}%7C%7Cpassword%7Ceq%7C{{users.password}}%7C%7Cusername%7Ceq%7C{{users.username}}&conjunctions=OR,OR,OR,OR,OR,OR&sort=-bio,-email,-id,-image,-password,-username",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find users By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Desc - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "users" property'] = responseJSON.hasOwnProperty('users');
	           
	        tests['Response contains "usersCount" property'] = responseJSON.hasOwnProperty('usersCount');
	                 
	        var users = responseJSON.users || {};
	        if (typeof users === 'object' && Array.isArray(users) && users.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(users, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'users' has the same length as the response array length
			  	check(users, {
			    '	Response array length should match': (arr) => arr.length === users.length,
			  	});
	                   
				tests['users[0] has "bio" property'] = users[0].hasOwnProperty('bio');
					  
				tests['users[0] has "email" property'] = users[0].hasOwnProperty('email');
					  
				tests['users[0] has "id" property'] = users[0].hasOwnProperty('id');
					  
				tests['users[0] has "image" property'] = users[0].hasOwnProperty('image');
					  
				tests['users[0] has "password" property'] = users[0].hasOwnProperty('password');
					  
				tests['users[0] has "username" property'] = users[0].hasOwnProperty('username');
					  
			}             
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find users By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Asc",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/users?offset=0&limit=10&filter=bio%7Ceq%7C{{users.bio}}%7C%7Cemail%7Ceq%7C{{users.email}}%7C%7Cid%7Ceq%7C{{users.id}}%7C%7Cimage%7Ceq%7C{{users.image}}%7C%7Cpassword%7Ceq%7C{{users.password}}%7C%7Cusername%7Ceq%7C{{users.username}}&conjunctions=OR,OR,OR,OR,OR,OR&sort=bio,email,id,image,password,username",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find users By Filter With Offset0 And Limit10, All Fields, Equals, Or, Sort Asc - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "users" property'] = responseJSON.hasOwnProperty('users');
	           
	        tests['Response contains "usersCount" property'] = responseJSON.hasOwnProperty('usersCount');
	                 
	        var users = responseJSON.users || {};
	        if (typeof users === 'object' && Array.isArray(users) && users.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(users, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'users' has the same length as the response array length
			  	check(users, {
			    '	Response array length should match': (arr) => arr.length === users.length,
			  	});
	                   
				tests['users[0] has "bio" property'] = users[0].hasOwnProperty('bio');
					  
				tests['users[0] has "email" property'] = users[0].hasOwnProperty('email');
					  
				tests['users[0] has "id" property'] = users[0].hasOwnProperty('id');
					  
				tests['users[0] has "image" property'] = users[0].hasOwnProperty('image');
					  
				tests['users[0] has "password" property'] = users[0].hasOwnProperty('password');
					  
				tests['users[0] has "username" property'] = users[0].hasOwnProperty('username');
					  
			}                  
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find users By Filter With Offset0 And Limit10, All Fields, Equals, Or Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/users?offset=0&limit=10&filter=bio%7Ceq%7C{{users.bio}}%7C%7Cemail%7Ceq%7C{{users.email}}%7C%7Cid%7Ceq%7C{{users.id}}%7C%7Cimage%7Ceq%7C{{users.image}}%7C%7Cpassword%7Ceq%7C{{users.password}}%7C%7Cusername%7Ceq%7C{{users.username}}&conjunctions=OR,OR,OR,OR,OR,OR",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find users By Filter With Offset0 And Limit10, All Fields, Equals, Or Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "users" property'] = responseJSON.hasOwnProperty('users');
	           
	        tests['Response contains "usersCount" property'] = responseJSON.hasOwnProperty('usersCount');
	                 
	        var users = responseJSON.users || {};
	        if (typeof users === 'object' && Array.isArray(users) && users.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(users, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'users' has the same length as the response array length
			  	check(users, {
			    '	Response array length should match': (arr) => arr.length === users.length,
			  	});
	                   
				tests['users[0] has "bio" property'] = users[0].hasOwnProperty('bio');
					  
				tests['users[0] has "email" property'] = users[0].hasOwnProperty('email');
					  
				tests['users[0] has "id" property'] = users[0].hasOwnProperty('id');
					  
				tests['users[0] has "image" property'] = users[0].hasOwnProperty('image');
					  
				tests['users[0] has "password" property'] = users[0].hasOwnProperty('password');
					  
				tests['users[0] has "username" property'] = users[0].hasOwnProperty('username');
					  
			}             
	      }
      }
    });sleep(delay);
    
    
    postman[Request]({
      name:
        "Find users By Filter With Offset0 And Limit10, All Fields, Equals, And Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/users?offset=0&limit=10&filter=bio%7Ceq%7C{{users.bio}}%7C%7Cemail%7Ceq%7C{{users.email}}%7C%7Cid%7Ceq%7C{{users.id}}%7C%7Cimage%7Ceq%7C{{users.image}}%7C%7Cpassword%7Ceq%7C{{users.password}}%7C%7Cusername%7Ceq%7C{{users.username}}&conjunctions=AND,AND,AND,AND,AND,AND",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find users By Filter With Offset0 And Limit10, All Fields, Equals, And Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "users" property'] = responseJSON.hasOwnProperty('users');
	           
	        tests['Response contains "usersCount" property'] = responseJSON.hasOwnProperty('usersCount');
	                 
	        var users = responseJSON.users || {};
	        if (typeof users === 'object' && Array.isArray(users) && users.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(users, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'users' has the same length as the response array length
			  	check(users, {
			    '	Response array length should match': (arr) => arr.length === users.length,
			  	});
	                   
				tests['users[0] has "bio" property'] = users[0].hasOwnProperty('bio');
					  
				tests['users[0] has "email" property'] = users[0].hasOwnProperty('email');
					  
				tests['users[0] has "id" property'] = users[0].hasOwnProperty('id');
					  
				tests['users[0] has "image" property'] = users[0].hasOwnProperty('image');
					  
				tests['users[0] has "password" property'] = users[0].hasOwnProperty('password');
					  
				tests['users[0] has "username" property'] = users[0].hasOwnProperty('username');
					  
			}                 
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find users By Filter With Offset0 And Limit10, All Fields, Not Equals, Or Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/users?offset=0&limit=10&filter=bio%7Cneq%7C{{users.bio}}%7C%7Cemail%7Cneq%7C{{users.email}}%7C%7Cid%7Cneq%7C{{users.id}}%7C%7Cimage%7Cneq%7C{{users.image}}%7C%7Cpassword%7Cneq%7C{{users.password}}%7C%7Cusername%7Cneq%7C{{users.username}}&conjunctions=OR,OR,OR,OR,OR,OR",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find users By Filter With Offset0 And Limit10, All Fields, Not Equals, Or Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "users" property'] = responseJSON.hasOwnProperty('users');
	           
	        tests['Response contains "usersCount" property'] = responseJSON.hasOwnProperty('usersCount');
	                 
	        var users = responseJSON.users || {};
            
            if (typeof users === 'object' && Array.isArray(users) && users.length > 0) {
			    // Check if 'articles' is an array and has length above 0
			  	check(users, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'users' has the same length as the response array length
			  	check(users, {
			    '	Response array length should match': (arr) => arr.length === users.length,
			  	});
	                   
				tests['users[0] has "bio" property'] = users[0].hasOwnProperty('bio');
					  
				tests['users[0] has "email" property'] = users[0].hasOwnProperty('email');
					  
				tests['users[0] has "id" property'] = users[0].hasOwnProperty('id');
					  
				tests['users[0] has "image" property'] = users[0].hasOwnProperty('image');
					  
				tests['users[0] has "password" property'] = users[0].hasOwnProperty('password');
					  
				tests['users[0] has "username" property'] = users[0].hasOwnProperty('username');
					  
			}                 
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find users By Filter With Offset0 And Limit10, All Fields, Like, And Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/users?offset=0&limit=10&filter=bio%7Clike%7C{{users.bio}}%7C%7Cemail%7Clike%7C{{users.email}}%7C%7Cid%7Clike%7C{{users.id}}%7C%7Cimage%7Clike%7C{{users.image}}%7C%7Cpassword%7Clike%7C{{users.password}}%7C%7Cusername%7Clike%7C{{users.username}}&conjunctions=AND,AND,AND,AND,AND,AND",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find users By Filter With Offset0 And Limit10, All Fields, Like, And Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "users" property'] = responseJSON.hasOwnProperty('users');
	           
	        tests['Response contains "usersCount" property'] = responseJSON.hasOwnProperty('usersCount');
	                 
	        var users = responseJSON.users || {};
	        if (typeof users === 'object' && Array.isArray(users) && users.length > 0) {

			    // Check if 'articles' is an array and has length above 0
			  	check(users, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'users' has the same length as the response array length
			  	check(users, {
			    '	Response array length should match': (arr) => arr.length === users.length,
			  	});
	                   
				tests['users[0] has "bio" property'] = users[0].hasOwnProperty('bio');
					  
				tests['users[0] has "email" property'] = users[0].hasOwnProperty('email');
					  
				tests['users[0] has "id" property'] = users[0].hasOwnProperty('id');
					  
				tests['users[0] has "image" property'] = users[0].hasOwnProperty('image');
					  
				tests['users[0] has "password" property'] = users[0].hasOwnProperty('password');
					  
				tests['users[0] has "username" property'] = users[0].hasOwnProperty('username');
					  
			}                
	      }
      }
    });sleep(delay);
    
    postman[Request]({
      name:
        "Find users By Filter With Offset0 And Limit10, All Fields, Not Like, Or Conjunctions",
      id: "2023-12-07-16-03-00-000941",
      method: "GET",
      options: { timeout: timeout },
      address:
        "{{APIURL}}/firmansyah/users?offset=0&limit=10&filter=bio%7Cnlike%7C{{users.bio}}%7C%7Cemail%7Cnlike%7C{{users.email}}%7C%7Cid%7Cnlike%7C{{users.id}}%7C%7Cimage%7Cnlike%7C{{users.image}}%7C%7Cpassword%7Cnlike%7C{{users.password}}%7C%7Cusername%7Cnlike%7C{{users.username}}&conjunctions=OR,OR,OR,OR,OR,OR",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        Authorization: "Token {{token}}"
      },
      post(response) {
        //console.log('Request URL: '+ response.request.url);
        //console.log('Request Method: '+ response.request.method);
        //console.log('Request Body: '+ response.request.body);

        //console.log('Response Status: '+ response.status);
        //console.log('Response Body: '+ response.body);
        var is200Response = responseCode.code === 200;
                       
        tests['Find users By Filter With Offset0 And Limit10, All Fields, Not Like, Or Conjunctions - Response code is 200 OK'] = is200Response;
        
	    if (!(environment.isIntegrationTest) && is200Response) {
	    	var responseJSON = JSON.parse(responseBody);
	        
	        tests['Response contains "users" property'] = responseJSON.hasOwnProperty('users');
	           
	        tests['Response contains "usersCount" property'] = responseJSON.hasOwnProperty('usersCount');
	                 
	        var users = responseJSON.users || {};

			if (typeof users === 'object' && Array.isArray(users) && users.length > 0) {
			    // Check if 'articles' is an array and has length above 0
			  	check(users, {
			    '	Response should be an array': (arr) => Array.isArray(arr) && arr.length > 0,
			  	});
			
			  	// Check if 'users' has the same length as the response array length
			  	check(users, {
			    '	Response array length should match': (arr) => arr.length === users.length,
			  	});
	                   
				tests['users[0] has "bio" property'] = users[0].hasOwnProperty('bio');
					  
				tests['users[0] has "email" property'] = users[0].hasOwnProperty('email');
					  
				tests['users[0] has "id" property'] = users[0].hasOwnProperty('id');
					  
				tests['users[0] has "image" property'] = users[0].hasOwnProperty('image');
					  
				tests['users[0] has "password" property'] = users[0].hasOwnProperty('password');
					  
				tests['users[0] has "username" property'] = users[0].hasOwnProperty('username');
					  
			}                 
	      }
      }
    });sleep(delay);
    
});    
}

export function handleSummary(data) {
  // Access the environment variable 'VAR' using the __ENV object
  const rpt = __ENV.RPT;
  //const now = new Date();
  //const year = now.getFullYear();
  //const month = String(now.getMonth() + 1).padStart(2, '0');
  //const day = String(now.getDate()).padStart(2, '0');
  //const hours = String(now.getHours()).padStart(2, '0');
  //const minutes = String(now.getMinutes()).padStart(2, '0');
  //const seconds = String(now.getSeconds()).padStart(2, '0');
  //const milliseconds = String(now.getMilliseconds()).padStart(3, '0');

  //const formattedDate = year+'-'+month+'-'+day+'T'+hours+':'+minutes+':'+seconds+'.'+milliseconds;
  
  //const LocalDateTimeNow = rpt;//"k6/reports/factor.all.pt."+formattedDate+myVar+".html";
  return {
    [rpt] : htmlReport(data),
    stdout: textSummary(data, { indent: " ", enableColors: true }),
  };
}
